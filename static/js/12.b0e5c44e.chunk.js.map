{"version":3,"sources":["app/layouts/BridgeCard/BridgeCard.tsx","../node_modules/@material-ui/icons/SettingsEthernetRounded.js","app/components/FailedBridgeTxWarning/FailedBridgeTxWarning.tsx","app/components/NetworkSwitchDialog/NetworkSwitchBox/NetworkSwitchBox.tsx","app/components/NetworkSwitchDialog/NetworkSwitchDialog.tsx","app/views/main/Bridge/Bridge.tsx"],"names":["CustomRouterLink","forwardRef","props","ref","style","flexGrow","flexBasis","useStyles","makeStyles","theme","root","flex","padding","spacing","breakpoints","down","tabs","display","width","maxWidth","tab","position","paddingTop","paddingBottom","borderRadius","backgroundColor","palette","disabledBackground","color","disabled","active","selected","tabCornerLeft","borderTopRightRadius","borderBottomRightRadius","border","tabCornerRight","borderTopLeftRadius","borderBottomLeftRadius","borderWidth","tabActive","tabNoticeOpposite","borderBottom","background","paperOpposite","BridgeCard","children","rest","className","staticContext","classes","Box","justifyContent","marginBottom","Button","disableElevation","variant","cls","activeClassName","component","to","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","container","borderLeft","borderRight","minWidth","warning","main","actionButton","marginTop","height","cancel","label","textDecoration","cursor","dotIcon","marginRight","connectedButton","type","hexToRGBA","breakLine","wordBreak","link","FailedBridgeTxWarning","dispatch","useDispatch","network","useNetwork","useState","failedDepositTx","setFailedDepositTx","bridgeState","useSelector","state","bridge","useEffect","activeBridgeTx","depositFailedAt","onTryAgain","actions","Bridge","dismissBridgeTx","Layout","showTransferConfirmation","explorerLink","useMemo","hash","sourceTxHash","Network","MainNet","srcChain","Blockchain","Ethereum","open","onClose","overflow","flexDirection","align","mt","mb","alignItems","href","target","onClick","fullWidth","settingsEthernetIcon","verticalAlign","NetworkSwitchBox","currentChainName","requiredChainName","requiredChainID","walletToChange","ethWallet","toggleShowNetworkSwitch","onCloseDialog","switchEthChain","a","provider","request","method","params","chainId","console","error","fontSize","fontWeight","isBoltX","NetworkSwitchDialog","showNetworkSwitchDialog","layout","zilWallet","wallet","bridgeWallets","formState","fromBlockchain","isMainNet","Number","Zilliqa","getEthChainName","getEthWalletName","isMetamask","getZilWalletName","WalletConnectType","Zeeves","ZilPay","BoltX","ethChainID","TestNet","margin","boxShadow","mainBoxShadow","connectWalletButton","connectedWalletButton","textColoured","primary","dark","textSpacing","letterSpacing","box","formControl","top","fill","minHeight","selectMenu","contrastText","wavyLine","left","marginLeft","closeIcon","float","right","priority","zIndex","extraPadding","CHAIN_NAMES","zil","eth","BridgeView","tokenFinder","useTokenFinder","ethConnectedAddress","setEthConnectedAddress","bridgeWallet","store","bridgeFormState","sourceAddress","destAddress","transferAmount","toString","setFormState","layoutState","sdk","setSdk","useAsyncTask","runInitTradeHubSDK","runLoadGasPrice","disconnectMenu","setDisconnectMenu","gasPrice","setGasPrice","disconnectSrcButtonRef","useRef","disconnectDestButtonRef","gt","getProvider","getGasPrice","BigNumber","tradehubNetwork","netZilToTradeHub","TradeHubSDK","token","reloadTokens","tokenList","bridgeToken","toBlockchain","fromToken","tokenAddress","blockchain","toToken","toTokenAddress","bridgeTx","tokens","find","denom","srcToken","updateForm","dstAddr","srcAddr","dstChain","forNetwork","setSourceAddress","addressInfo","byte20","setDestAddress","address","prevState","onClickConnectETH","web3Modal","Web3Modal","cacheProvider","disableInjectedProvider","providerOptions","connect","ethersProvider","ethers","providers","Web3Provider","signer","getSigner","getAddress","ethAddress","getNetwork","Wallet","setBridgeWallet","Token","refetchState","onClickConnectZIL","toggleShowWallet","showTransfer","onDisconnectEthWallet","clear","disconnectForm","undefined","clearCachedProvider","isSubmitEnabled","isZero","isGreaterThan","bnOrZero","balance","shiftedBy","decimals","isNativeAsset","asset","asset_id","adjustedForGas","BridgeParamConstants","ZIL_GAS_PRICE","gasLimit","ZIL_GAS_LIMIT","minus","multipliedBy","gasPriceGwei","utils","formatUnits","ETH_GAS_LIMIT","onSelectMax","decimalPlaces","Tooltip","placement","arrow","title","rel","bgcolor","FormControl","Select","MenuProps","paper","onChange","e","MenuItem","buttonRef","chain","isZilToEth","amount","onEditorBlur","onAmountChange","rawAmount","isNaN","isNegative","isFinite","BIG_ZERO","onCurrencyChange","toLowerCase","fromBech32Address","replace","showMaxButton","onEnterKeyPress","anchorEl","current","onChangeWallet","onDisconnectEth","onClickaway"],"mappings":"sSAOMA,EAAmBC,sBAAW,SAACC,EAAYC,GAAb,OAClC,qBAAKA,IAAKA,EAAKC,MAAO,CAAEC,SAAU,EAAGC,UAAW,GAAhD,SACE,cAAC,UAAD,eAAgBJ,SAMdK,EAAYC,aAAW,SAACC,GAAD,YAAsB,CACjDC,MAAI,GACFC,KAAM,EACNC,QAASH,EAAMI,QAAQ,EAAG,EAAG,IAF3B,cAGDJ,EAAMK,YAAYC,KAAK,MAAQ,CAC9BH,QAASH,EAAMI,QAAQ,EAAG,EAAG,KAJ7B,cAMDJ,EAAMK,YAAYC,KAAK,MAAQ,CAC9BH,QAASH,EAAMI,QAAQ,EAAG,EAAG,KAP7B,GAUJG,KAAK,aACHC,QAAS,OACTC,MAAO,SACNT,EAAMK,YAAYC,KAAK,MAAQ,CAC9BI,SAAU,MAGdC,IAAK,CACHC,SAAU,WACVH,MAAO,OACPI,WAAYb,EAAMI,QAAQ,GAC1BU,cAAed,EAAMI,QAAQ,GAC7BW,aAzBuB,GA0BvBC,gBAAiBhB,EAAMiB,QAAQN,IAAIO,mBACnCC,MAAOnB,EAAMiB,QAAQN,IAAIS,SACzB,UAAW,CACTJ,gBAAiBhB,EAAMiB,QAAQN,IAAIU,OACnCF,MAAOnB,EAAMiB,QAAQN,IAAIW,WAG7BC,cAAe,CACbC,qBAAsB,EACtBC,wBAAyB,EACzBC,OAAQ1B,EAAMiB,QAAQS,QAExBC,eAAgB,CACdC,oBAAqB,EACrBC,uBAAwB,EACxBH,OAAQ1B,EAAMiB,QAAQS,OACtBI,YAAa,iBAEfC,UAAW,CACTf,gBAAiBhB,EAAMiB,QAAQN,IAAIU,OACnCF,MAAOnB,EAAMiB,QAAQN,IAAIW,SACzB,UAAW,CACTN,gBAAiBhB,EAAMiB,QAAQN,IAAIU,OACnCF,MAAOnB,EAAMiB,QAAQN,IAAIW,WAG7BU,kBAAmB,CACjB,UAAW,CACTC,aAAa,aAAD,OAAejC,EAAMiB,QAAQiB,WAAWC,qBAsC3CC,EAjC0B,SAAC3C,GACxC,IAAQ4C,EAAgD5C,EAAhD4C,SAAuCC,GAAS7C,EAAtC8C,UAAsC9C,EAA3B+C,cAA7B,YAAwD/C,EAAxD,IACMgD,EAAU3C,IAEhB,OACE,eAAC4C,EAAA,EAAD,CAAKH,UAAWE,EAAQxC,KAAxB,UACE,cAACyC,EAAA,EAAD,CAAKlC,QAAQ,OAAOmC,eAAe,SAASC,aAAa,MAAzD,SACE,eAACF,EAAA,EAAD,CAAKH,UAAWE,EAAQlC,KAAxB,UACE,cAACsC,EAAA,EAAD,CACEC,kBAAgB,EAChB3B,MAAM,UACN4B,QAAQ,YACRR,UAAWS,IAAIP,EAAQ9B,IAAK8B,EAAQlB,eACpC0B,gBAAiBD,IAAIP,EAAQV,WAC7BmB,UAAW3D,EACX4D,GAAG,UAPL,0BAQA,cAACN,EAAA,EAAD,CACEC,kBAAgB,EAChB3B,MAAM,UACN4B,QAAQ,YACRR,UAAWS,IAAIP,EAAQ9B,IAAK8B,EAAQd,gBACpCsB,gBAAiBD,IAAIP,EAAQV,WAC7BmB,UAAW3D,EACX4D,GAAG,WAPL,mCAUJ,cAACT,EAAA,EAAD,2BAASJ,GAAT,aACGD,U,kCCjGT,IAAIe,EAAyBC,EAAQ,IAEjCC,EAA0BD,EAAQ,IAEtCE,OAAOC,eAAeC,EAAS,aAAc,CAC3CC,OAAO,IAETD,EAAQE,aAAU,EAElB,IAAIC,EAAQN,EAAwBD,EAAQ,IAIxCQ,GAAW,EAFMT,EAAuBC,EAAQ,KAElBM,SAAuBC,EAAME,cAAc,OAAQ,CACnFC,EAAG,6XACD,2BAEJN,EAAQE,QAAUE,G,+XCPZ/D,EAAYC,aAAW,SAACC,GAAD,cAAsB,CACjDC,KAAK,eACFD,EAAMK,YAAYC,KAAK,MAAQ,CAC9BG,MAAO,mBAGXuD,WAAS,GACPhD,gBAAiBhB,EAAMiB,QAAQiB,WAAWyB,QAC1CM,WAAYjE,EAAMiB,QAAQS,OAC1BwC,YAAalE,EAAMiB,QAAQS,OAC3BO,aAAcjC,EAAMiB,QAAQS,OAC5BX,aAAc,gBACdZ,QAASH,EAAMI,QAAQ,EAAG,EAAG,GAC7B+D,SAAU,KAPH,cAQNnE,EAAMK,YAAYC,KAAK,MAAQ,CAC9BH,QAASH,EAAMI,QAAQ,EAAG,EAAG,KATxB,cAWNJ,EAAMK,YAAYC,KAAK,MAAQ,CAC9B6D,SAAU,MAZL,GAeTC,QAAS,CACPjD,MAAOnB,EAAMiB,QAAQmD,QAAQC,MAE/BC,aAAc,CACZC,UAAWvE,EAAMI,QAAQ,GACzBwC,aAAc5C,EAAMI,QAAQ,GAC5BoE,OAAQ,IAEVC,OAAQ,CACNtD,MAAK,UAAEnB,EAAMiB,eAAR,aAAE,EAAeyD,MACtBC,eAAgB,YAChB,UAAW,CACTC,OAAQ,YAGZC,QAAS,CACPC,YAAa9E,EAAMI,QAAQ,GAC3BwC,aAAc5C,EAAMI,QAAQ,KAE9B2E,gBAAiB,CACfP,OAAQ,GACR/D,MAAO,cACPO,gBAAiB,cACjBU,OAAO,aAAD,OAAsC,SAAvB1B,EAAMiB,QAAQ+D,KAAd,cAAuCC,YAAU,UAAW,KAAS,WAC1F,UAAW,CACTjE,gBAAgB,OAAD,OAASiE,YAAU,UAAW,OAGjDC,UAAW,CACTC,UAAW,cAEbC,KAAM,CACJjE,MAAOnB,EAAMiB,QAAQmE,KACrB,UAAW,CACTT,eAAgB,kBAyFPU,EApFe,SAAC5F,GACYA,EAAjC4C,SAAR,IAAkBE,EAAuB9C,EAAvB8C,UAAcD,EAAhC,YAAyC7C,EAAzC,GACMgD,EAAU3C,IACVwF,EAAWC,cACXC,EAAUC,cAChB,EAA8CC,mBAA0B,MAAxE,mBAAOC,EAAP,KAAwBC,EAAxB,KACMC,EAAcC,aAAoC,SAAAC,GAAK,OAAIA,EAAMC,UAEvEC,qBAAU,WAAO,IAAD,GACd,UAAIJ,EAAYK,sBAAhB,aAAI,EAA4BC,iBAC9BP,EAAmBC,EAAYK,gBACrBL,EAAYK,gBACtBN,EAAmB,QAEpB,CAACC,EAAYK,iBAEhB,IAAME,EAAa,WACZT,IAELL,EAASe,IAAQC,OAAOC,gBAAgBZ,IACxCL,EAASe,IAAQG,OAAOC,0BAAyB,MAG7CC,EAAeC,mBAAQ,WAAO,IAAD,EAC3BC,EAAI,iBAAGjB,QAAH,IAAGA,OAAH,EAAGA,EAAiBkB,oBAApB,QAAoC,GAC9C,GAAIrB,IAAYsB,UAAQC,QACtB,cAAQpB,QAAR,IAAQA,OAAR,EAAQA,EAAiBqB,UACvB,KAAKC,aAAWC,SACd,MAAM,iCAAN,OAAwCN,GAC1C,QACE,MAAM,mCAAN,OAA0CA,QAG9C,cAAQjB,QAAR,IAAQA,OAAR,EAAQA,EAAiBqB,UACvB,KAAKC,aAAWC,SACd,MAAM,yCAAN,OAAgDN,GAClD,QACE,MAAM,mCAAN,OAA0CA,EAA1C,uBAGL,CAACjB,EAAiBH,IAErB,OACE,cAAC,IAAD,yBACE2B,OAAQxB,EACRyB,QAAShB,GACL9D,GAHN,IAIEC,UAAWS,IAAIP,EAAQxC,KAAMsC,GAJ/B,SAME,eAACG,EAAA,EAAD,CAAK2E,SAAS,SAAS7G,QAAQ,OAAO8G,cAAc,SAAS/E,UAAWE,EAAQuB,UAAhF,UACE,cAAC,KAAD,CAAMjB,QAAQ,KAAKwE,MAAM,SAAShF,UAAWE,EAAQ2B,QAArD,8BAIA,eAAC1B,EAAA,EAAD,CAAK8E,GAAI,EAAGC,GAAI,IAAKjH,QAAQ,OAAO8G,cAAc,SAASI,WAAW,SAAtE,UACE,cAAC,KAAD,CAAM9E,aAAc,EAAGG,QAAQ,KAAKwE,MAAM,SAA1C,uGAIA,eAAC,KAAD,CAAM3E,aAAc,EAAGG,QAAQ,KAAKwE,MAAM,SAAShF,UAAWE,EAAQyC,UAAtE,wBACOS,QADP,IACOA,OADP,EACOA,EAAiBkB,gBAGxB,cAAChE,EAAA,EAAD,CAAQE,QAAQ,YAAYR,UAAWE,EAAQsC,gBAAiB4C,KAAMjB,EAAckB,OAAO,SAA3F,SACE,cAAC,KAAD,CAAM7E,QAAQ,SAAd,mCAIJ,cAACL,EAAA,EAAD,CAAKlC,QAAQ,OAAOiH,GAAI,EAAxB,SACE,cAAC5E,EAAA,EAAD,CACEE,QAAQ,YACR5B,MAAM,UACNoB,UAAWE,EAAQ6B,aACnBuD,QAASzB,EACT0B,WAAS,EALX,gC,oCChIJhI,EAAYC,aAAW,SAACC,GAAD,cAAsB,CAC/CC,MAAI,GACAe,gBAAiBhB,EAAMiB,QAAQiB,WAAWyB,QAC1CM,WAAYjE,EAAMiB,QAAQS,OAC1BwC,YAAalE,EAAMiB,QAAQS,OAC3BO,aAAcjC,EAAMiB,QAAQS,OAC5BX,aAAc,gBACdZ,QAASH,EAAMI,QAAQ,EAAG,EAAG,GAC7B+D,SAAU,KAPV,cAQCnE,EAAMK,YAAYC,KAAK,MAAQ,CAC5BH,QAASH,EAAMI,QAAQ,EAAG,EAAG,KATjC,cAWCJ,EAAMK,YAAYC,KAAK,MAAQ,CAC5B6D,SAAU,MAZd,GAeJC,QAAS,CACLjD,MAAOnB,EAAMiB,QAAQmD,QAAQC,MAEjC0D,qBAAsB,CAClBC,cAAe,YAEnB1D,aAAc,CACVC,UAAWvE,EAAMI,QAAQ,GACzBwC,aAAc5C,EAAMI,QAAQ,GAC5BoE,OAAQ,IAEZC,OAAQ,CACJtD,MAAK,UAAEnB,EAAMiB,eAAR,aAAE,EAAeyD,MACtBC,eAAgB,YAChB,UAAW,CACPC,OAAQ,YAGhBC,QAAS,CACLC,YAAa9E,EAAMI,QAAQ,GAC3BwC,aAAc5C,EAAMI,QAAQ,KAEhC2E,gBAAiB,CACbP,OAAQ,GACR/D,MAAO,cACPO,gBAAiB,cACjBU,OAAO,aAAD,OAAsC,SAAvB1B,EAAMiB,QAAQ+D,KAAd,cAAuCC,YAAU,UAAW,KAAS,WAC1F,UAAW,CACPjE,gBAAgB,OAAD,OAASiE,YAAU,UAAW,WAgG1CgD,EApFU,SAACxI,GACtB,IAAQ8C,EAA+F9C,EAA/F8C,UAAW2F,EAAoFzI,EAApFyI,iBAAkBC,EAAkE1I,EAAlE0I,kBAAmBC,EAA+C3I,EAA/C2I,gBAAiBC,EAA8B5I,EAA9B4I,eAAgBC,EAAc7I,EAAd6I,UACnF7F,EAAU3C,IACVwF,EAAWC,cAEjBU,qBAAU,WACoB,OAAtBkC,GACA7C,EAASe,IAAQG,OAAO+B,wBAAwB,YAIrD,CAACJ,IAEJ,IAAMK,EAAgB,WACpBlD,EAASe,IAAQG,OAAO+B,wBAAwB,WAG5CE,EAAc,uCAAG,sBAAAC,EAAA,kEAEdJ,EAFc,iEAGbA,EAAUK,SAASC,QAAQ,CAC7BC,OAAQ,6BACRC,OAAQ,CAAC,CAAEC,QAASX,MALL,OAOnBI,IAPmB,gDASnBQ,QAAQC,MAAR,MATmB,yDAAH,qDAapB,OACI,eAACvG,EAAA,EAAD,CAAK2E,SAAS,SAAS7G,QAAQ,OAAO8G,cAAc,SAAS/E,UAAWS,IAAIP,EAAQxC,KAAMsC,GAA1F,UACI,eAAC,KAAD,CAAMQ,QAAQ,KAAKwE,MAAM,SAAShF,UAAWE,EAAQ2B,QAArD,UACI,cAAC,IAAD,CAAsB8E,SAAS,QAAQ3G,UAAWE,EAAQsF,uBAD9D,8BAIA,eAACrF,EAAA,EAAD,CAAK8E,GAAI,EAAGC,GAAI,IAAKjH,QAAQ,OAAO8G,cAAc,SAASI,WAAW,SAAtE,UACI,cAAC,KAAD,CAAM9E,aAAc,EAAGG,QAAQ,KAAKwE,MAAM,SAA1C,4CAIA,cAAC1E,EAAA,EAAD,CAAQE,QAAQ,YAAYR,UAAWE,EAAQsC,gBAA/C,SACI,eAAC,KAAD,CAAMhC,QAAQ,SAAd,UACI,cAAC,IAAD,CAASR,UAAWE,EAAQoC,UAAYqD,UAMpD,eAAC,KAAD,CAAMtF,aAAc,IAAK2E,MAAM,SAA/B,2BACkB,sBAAM5H,MAAO,CAAEwJ,WAAY,QAA3B,SAAsChB,IADxD,OACqF,sBAAMxI,MAAO,CAAEwJ,WAAY,QAA3B,SAAsCd,IAD3H,gCAICD,KAAmB,OAACE,QAAD,IAACA,OAAD,EAACA,EAAWK,SAASS,SACnC,eAAC,WAAD,WACE,eAACvG,EAAA,EAAD,CACIE,QAAQ,YACR5B,MAAM,UACNoB,UAAWE,EAAQ6B,aACnBuD,QAASY,EAJb,uBAMeN,KAGf,cAAC,KAAD,CAAM5D,UAAW,IAAK3B,aAAc,IAAKL,UAAWE,EAAQgC,OAAQ8C,MAAM,SAASM,QAASW,EAA5F,uBAIF,cAAC9F,EAAA,EAAD,CAAKlC,QAAQ,OAAOiH,GAAI,EAAxB,SACE,cAAC5E,EAAA,EAAD,CACIE,QAAQ,YACR5B,MAAM,UACNoB,UAAWE,EAAQ6B,aACnBuD,QAASW,EACTV,WAAS,EALb,yB,2BC3HdhI,EAAYC,aAAW,SAACC,GAAD,MAAsB,CAC/CC,KAAM,OA2FKoJ,EAvFa,SAAC5J,GACgBA,EAAjC4C,SAAR,IAAkBE,EAAuB9C,EAAvB8C,UAAcD,EAAhC,YAAyC7C,EAAzC,GACMgD,EAAU3C,IACV0F,EAAUC,cACVH,EAAWC,cACX+D,EAA0BxD,aAAgC,SAAAC,GAAK,OAAIA,EAAMwD,OAAOD,2BAChFE,EAAY1D,aAA+C,SAAAC,GAAK,OAAIA,EAAM0D,OAAOA,UACjFnB,EAAYxC,aAAqD,SAAAC,GAAK,OAAIA,EAAM0D,OAAOC,cAAczC,aAAWC,aAChHF,EAAWlB,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,OAAO2D,UAAUC,kBAE9EC,EAAYlD,mBAAQ,WACxB,OAAIK,IAAaC,aAAWC,SACS,IAA/B4C,OAAM,OAACxB,QAAD,IAACA,OAAD,EAACA,EAAWS,SAGb/B,IAAaC,aAAW8C,QAC1BvE,IAAYsB,UAAQC,aADtB,IAGN,QAACuB,QAAD,IAACA,OAAD,EAACA,EAAWS,QAASvD,EAASwB,IAEjC,EAA+EL,mBAAQ,WACrF,IAAMqD,EAAkB,SAACjB,GACvB,OAAQA,GACN,KAAK,EAAG,MAAO,mBACf,KAAK,EAAG,MAAO,uBACf,QAAS,MAAO,oBAGdkB,EAAmB,WACvB,cAAI3B,QAAJ,IAAIA,OAAJ,EAAIA,EAAWK,SAASS,SACb,SACJ,OAAId,QAAJ,IAAIA,OAAJ,EAAIA,EAAWK,SAASuB,YACpB,WAEJ,eAGHC,EAAmB,WACvB,cAAQX,QAAR,IAAQA,OAAR,EAAQA,EAAWxE,MACjB,KAAKoF,IAAkBC,OAAQ,MAAO,gBACtC,KAAKD,IAAkBE,OAAQ,MAAO,SACtC,KAAKF,IAAkBG,MAAO,MAAO,QACrC,QAAS,MAAO,gBAIpB,IAAKjC,IAAckB,EACjB,MAAO,CAAC,KAAM,KAAM,KAAM,MAG5B,IAAMgB,EAAaV,OAAM,OAACxB,QAAD,IAACA,OAAD,EAACA,EAAWS,SACrC,GAAIc,EAAW,CACb,GAAmB,IAAfW,EAEF,OADAlF,EAASe,IAAQG,OAAO+B,wBAAwB,SACzC,CAACyB,EAAgB,GAAI,MAAOC,IAAoBD,EAAgBQ,IAClE,IAAa,OAAThB,QAAS,IAATA,OAAA,EAAAA,EAAWhE,WAAYsB,UAAQC,QAExC,OADAzB,EAASe,IAAQG,OAAO+B,wBAAwB,SACzC,CAAC,kBAAmB,KAAM4B,IAAoB,uBAElD,CACL,GAAmB,IAAfK,EAEF,OADAlF,EAASe,IAAQG,OAAO+B,wBAAwB,SACzC,CAACyB,EAAgB,GAAI,MAAOC,IAAoBD,EAAgBQ,IAClE,IAAa,OAAThB,QAAS,IAATA,OAAA,EAAAA,EAAWhE,WAAYsB,UAAQ2D,QAExC,OADAnF,EAASe,IAAQG,OAAO+B,wBAAwB,SACzC,CAAC,kBAAmB,KAAM4B,IAAoB,mBAGzD,MAAO,CAAC,KAAM,KAAM,KAAM,QACzB,CAAC7E,EAAUgD,EAAWkB,EAAWK,IAjDpC,mBAAO1B,EAAP,KAA0BC,EAA1B,KAA2CC,EAA3C,KAA2DH,EAA3D,KAuDA,OACI,cAAC,IAAD,yBACIf,KAAMmC,EACNlC,QAPc,WAClB9B,EAASe,IAAQG,OAAO+B,wBAAwB,YAOxCjG,GAHR,IAIIC,UAAWS,IAAIP,EAAQxC,KAAMsC,GAJjC,SAMI,cAAC,EAAD,CAAkB+F,UAAWA,EAAWH,kBAAmBA,EAAmBC,gBAAiBA,EAAiBC,eAAgBA,EAAgBH,iBAAkBA,Q,2FCxExKpI,GAAYC,aAAW,SAACC,GAAD,YAAsB,CACjDC,KAAM,GAEN+D,WAAS,GACPtD,SAAU,IACVgK,OAAQ,SACRC,UAAW3K,EAAMiB,QAAQ2J,cACzB7J,aAAc,GACdmB,WAAmC,SAAvBlC,EAAMiB,QAAQ+D,KAAkB,oCAAsC,UAClFtD,OAAQ1B,EAAMiB,QAAQS,QANf,cAON1B,EAAMK,YAAYC,KAAK,MAAQ,CAC9BI,SAAU,IACVP,QAASH,EAAMI,QAAQ,EAAG,EAAG,KATxB,wBAWEJ,EAAMI,QAAQ,EAAG,EAAG,IAXtB,6BAYO,IAZP,GAcTkE,aAAc,CACZC,UAAWvE,EAAMI,QAAQ,GACzBwC,aAAc5C,EAAMI,QAAQ,GAC5BoE,OAAQ,IAEVqG,oBAAqB,CACnBtG,UAAWvE,EAAMI,QAAQ,GACzBoE,OAAQ,IAEVsG,sBAAuB,CACrB9J,gBAAiB,cACjBU,OAAO,aAAD,OAAsC,SAAvB1B,EAAMiB,QAAQ+D,KAAd,cAAuCC,YAAU,UAAW,KAAS,WAC1F,UAAW,CACTjE,gBAAiBhB,EAAMiB,QAAQyD,QAGnCqG,aAAc,CACZ5J,MAAOnB,EAAMiB,QAAQ+J,QAAQC,MAE/BC,YAAa,CACXC,cAAe,SAEjBC,IAAK,CACH5K,QAAS,OACTN,KAAM,QACNoH,cAAe,SACf5F,OAAO,aAAD,OAAsC,SAAvB1B,EAAMiB,QAAQ+D,KAAkB,UAAY,WACjEjE,aAAc,GACdZ,QAASH,EAAMI,QAAQ,IAEzBiL,YAAa,CACXX,OAAQ1K,EAAMI,QAAQ,GACtB+D,SAAU,IACV3D,QAAS,WACT,4BAA6B,CAC3BQ,gBAAiB,eAEnB,oBAAqB,CACnBD,aAAc,GACd,UAAW,CACTC,gBAAwC,SAAvBhB,EAAMiB,QAAQ+D,KAAkB,4BAA8B,wBAGnF,2BAA4B,CAC1BtD,OAAQ,QAEV,wBAAyB,CACvByH,WAAY,OACZD,SAAU,QAEZ,oBAAqB,CACnBoC,IAAK,mBACLC,KAAMvL,EAAMiB,QAAQyD,OAEtB,0BAA2B,CACzB8G,UAAW,IAGfC,WAAY,CACVzK,gBAAiBhB,EAAMiB,QAAQiB,WAAWyB,QAC1C,sBAAuB,CACrB5C,aAAc,OACdZ,QAASH,EAAMI,QAAQ,KACvBuC,eAAgB,UAElB,uCAAwC,CACtC3B,gBAAwC,SAAvBhB,EAAMiB,QAAQ+D,KAAkB,4BAA8B,uBAEjF,mCAAoC,CAClChE,gBAAiBhB,EAAMiB,QAAQyD,MAC/BvD,MAAOnB,EAAMiB,QAAQ+J,QAAQU,cAE/B,qBAAsB,CACpBvL,QAAS,QAGbwL,SAAS,aACP/G,OAAQ,UACRhE,SAAU,WACV0K,IAAK,MACLM,KAAM,MACNC,WAAY,QACZtH,UAAW,QACX9D,MAAO,SACNT,EAAMK,YAAYC,KAAK,MAAQ,CAC9BG,MAAO,QACPoL,WAAY,UAGhBC,UAAW,CACTC,MAAO,QACPC,MAAO,EACPpL,SAAU,WACVT,QAAS,GAEX8L,SAAU,CACRC,OAAQ,IAEVC,aAAc,CACZhM,QAASH,EAAMI,QAAQ,QAUrBgM,GAAmB,CACvBC,IAAKpF,aAAW8C,QAChBuC,IAAKrF,aAAWC,UAkgBHqF,GA/foD,SAAC9M,GACzBA,EAAjC4C,SAAR,IAAkBE,EAAuB9C,EAAvB8C,UAAcD,EAAhC,YAAyC7C,EAAzC,IACMgD,EAAU3C,KACVwF,EAAWC,cACXC,EAAUC,cACV+G,EAAcC,cACpB,EAAsD/G,mBAAS,IAA/D,mBAAOgH,EAAP,KAA4BC,EAA5B,KACMlD,EAAS3D,aAA+C,SAAAC,GAAK,OAAIA,EAAM0D,OAAOA,UAC9EmD,EAAe9G,aAAqD,SAAAC,GAAK,OAAIA,EAAM0D,OAAOC,cAAczC,aAAWC,aACnHrB,EAAcC,aAAoC,SAAA+G,GAAK,OAAIA,EAAM7G,UACjE8G,EAAmChH,aAAwC,SAAA+G,GAAK,OAAIA,EAAM7G,OAAO2D,aACvG,EAAkCjE,mBAAkC,CAClEqH,cAAeD,EAAgBC,eAAiB,GAChDC,YAAaF,EAAgBE,aAAe,GAC5CC,eAAgBH,EAAgBG,eAAeC,YAAc,MAH/D,mBAAOvD,EAAP,KAAkBwD,EAAlB,KAKMC,EAActH,aAAoC,SAAA+G,GAAK,OAAIA,EAAMtD,UACvE,GAAsB7D,mBAA6B,MAAnD,qBAAO2H,GAAP,MAAYC,GAAZ,MACA,GAA6BC,YAAa,mBAAnCC,GAAP,qBACA,GAA0BD,YAAa,gBAAhCE,GAAP,qBACA,GAA4C/H,qBAA5C,qBAAOgI,GAAP,MAAuBC,GAAvB,MACA,GAAgCjI,qBAAhC,qBAAOkI,GAAP,MAAiBC,GAAjB,MACMC,GAAyBC,mBACzBC,GAA0BD,mBAEhC9H,qBAAU,aACI,OAAR2H,SAAQ,IAARA,QAAA,EAAAA,GAAUK,GAAG,KAAOZ,IAExBI,GAAe,sBAAC,4BAAA/E,EAAA,6EACS2E,SADT,IACSA,QADT,EACSA,GAAKf,IAAI4B,cAAcC,cADhC,OACRP,EADQ,OAEdC,GAAY,IAAIO,IAAUR,EAASV,aAFrB,8CAMf,CAACG,GAAKO,KAET3H,qBAAU,WACRuH,GAAkB,sBAAC,8BAAA9E,EAAA,6DACX2F,EAAkBC,YAAiB9I,GACnC6H,EAAM,IAAIkB,cAAY,CAAE/I,QAAS6I,IAFtB,SAGXhB,EAAImB,MAAMC,eAHC,OAIjBnB,GAAOD,GAJU,8CAQlB,CAAC7H,IAEJ,IAAMkJ,GAAyC5B,EAAgBlD,iBAAmB3C,aAAW8C,QAAU,aAAe,aAEvG4E,GAA8C7B,EAArD0B,MAAoB5E,GAAiCkD,EAAjClD,eAAgBgF,GAAiB9B,EAAjB8B,aAEpCC,GAAclI,mBAAQ,WAC5B,OAAKgI,GACE,CACLE,UAAWrC,EAAYmC,GAAYG,aAAcH,GAAYI,YAC7DC,QAASxC,EAAYmC,GAAYM,eAAgBN,GAAYC,eAHtC,KAKxB,CAACpC,EAAamC,KANTE,UAQR5I,qBAAU,WACR,IAAMiJ,EAAWrJ,EAAYK,eAE7B,GAAIgJ,EAAU,CACP9B,EAAY3G,0BACfnB,EAASe,IAAQG,OAAOC,4BAG1B,IACMkI,EADe9I,EAAYsJ,OAAOD,EAASlI,UAChBoI,MAAK,SAAAZ,GAAK,OAAIA,EAAMa,QAAUH,EAASI,YAExEhK,EAASe,IAAQC,OAAOiJ,WAAW,CACjCvC,YAAakC,EAASM,QACtBzC,cAAemC,EAASO,QACxB7F,eAAgBsF,EAASlI,SACzB4H,aAAcM,EAASQ,SACvBC,WAAYnK,EACZgJ,MAAOG,QAGV,CAAC9I,EAAYK,eAAgBL,EAAYsJ,OAAQ/B,EAAa5H,EAASF,IAE1EW,qBAAU,WACO,OAAXwD,EACEqD,EAAgBlD,iBAAmB3C,aAAW8C,QAChD6F,GAAiBnG,EAAOoG,YAAYC,QAEpCC,GAAetG,EAAOoG,YAAYC,QAGhChD,EAAgBlD,iBAAmB3C,aAAW8C,QAChD6F,GAAiB,IAEjBG,GAAe,MAKlB,CAACtG,EAAQqD,EAAgBlD,iBAE5B,IAAMgG,GAAmB,SAACI,GAExB7C,GAAa,SAAA8C,GAAS,kCACjBA,GADiB,IAEpBlD,cAAeiD,OAEjB1K,EAASe,IAAQC,OAAOiJ,WAAW,CACjCxC,cAAeiD,MAIbD,GAAiB,SAACC,GACtB7C,GAAa,SAAA8C,GAAS,kCACjBA,GADiB,IAEpBjD,YAAagD,OAEf1K,EAASe,IAAQC,OAAOiJ,WAAW,CACjCvC,YAAagD,MA4CXE,GAAiB,uCAAG,sCAAAxH,EAAA,6DAClByH,EAAY,IAAIC,IAAU,CAC9BC,eAAe,EACfC,yBAAyB,EACzB9K,QAASA,IAAYsB,UAAQC,QAAU,UAAY,UACnDwJ,sBALsB,SAQDJ,EAAUK,UART,cAQlB7H,EARkB,OASlB8H,EAAiB,IAAIC,SAAOC,UAAUC,aAAajI,GACnDkI,EAASJ,EAAeK,YAVN,SAWCD,EAAOE,aAXR,cAWlBC,EAXkB,iBAYDP,EAAeQ,aAZd,QAYlBlI,EAZkB,OAY4BA,QAEhD+D,EAAgBlD,iBAAmB3C,aAAWC,UAChD0I,GAAiBoB,GAGflE,EAAgB8B,eAAiB3H,aAAWC,UAC9C6I,GAAeiB,GAGjBrE,EAAuBqE,GAEvB1L,EAASe,IAAQ6K,OAAOC,gBAAgB,CAAEpC,WAAY9H,aAAWC,SAAUuC,OAAQ,CAAEd,SAAUA,EAAUqH,QAASgB,EAAYjI,QAASA,MACvIzD,EAASe,IAAQ+K,MAAMC,gBAzBC,4CAAH,qDA4BjBC,GAAoB,WACxBhM,EAASe,IAAQG,OAAO+K,oBAET,OAAX9H,GAAmBqD,EAAgBlD,iBAAmB3C,aAAW8C,SACnE6F,GAAiBnG,EAAOoG,YAAYC,QAGvB,OAAXrG,GAAmBqD,EAAgB8B,eAAiB3H,aAAW8C,SACjEgG,GAAetG,EAAOoG,YAAYC,SAgEhC0B,GAAe,WAEkB,IAAlC1H,OAAM,OAAC8C,QAAD,IAACA,OAAD,EAACA,EAAc7D,WAAwB,OAANU,QAAM,IAANA,OAAA,EAAAA,EAAQjE,WAAYsB,UAAQC,SACjC,IAAlC+C,OAAM,OAAC8C,QAAD,IAACA,OAAD,EAACA,EAAc7D,WAAwB,OAANU,QAAM,IAANA,OAAA,EAAAA,EAAQjE,WAAYsB,UAAQ2D,QAMtEnF,EAASe,IAAQG,OAAOC,0BAA0B2G,EAAY3G,2BAJ5DnB,EAASe,IAAQG,OAAO+B,wBAAwB,UAiC9CkJ,GAAwB,SAACC,GAC7B,IAAIC,EAAiB,GAEnBA,EADE/C,KAAiB3H,aAAW8C,QACb,CACfgD,mBAAe6E,EACfpD,WAAOoD,GAGQ,CACf5E,iBAAa4E,EACbpD,WAAOoD,GAGX,IAAMzB,EAAY,IAAIC,IAAU,CAC9BC,eAAe,EACfC,yBAAyB,EACzB9K,QAAS,UACT+K,sBAEEmB,GACFvB,EAAU0B,sBAEZlE,GAAkB,MAClBrI,EAASe,IAAQC,OAAOiJ,WAAWoC,IACnCrM,EAASe,IAAQ6K,OAAOC,gBAAgB,CAAEpC,WAAY9H,aAAWC,SAAUuC,OAAQ,SAG/EqI,GAAkBnL,mBAAQ,WAC9B,SAAKgD,EAAUoD,gBAAkBpD,EAAUqD,gBAEvCF,EAAgBG,eAAe8E,YAE/BlD,KAAa/B,EAAgBG,eAAe+E,cAAcC,YAASpD,GAAUqD,SAASC,WAAWtD,GAAUuD,eAI9G,CAACzI,EAAWmD,EAAgBG,eAAgB4B,KAGzCwD,GAAgB,SAACC,GAErB,MADoB,6CACZA,EAAMC,UAGVC,GAAiB,SAACN,EAAoBnD,GAC1C,GAAIA,IAAe9H,aAAW8C,QAAS,CACrC,IAAM6D,EAAW,IAAIQ,IAAJ,UAAiBqE,IAAqBC,gBACjDC,EAAW,IAAIvE,IAAJ,UAAiBqE,IAAqBG,gBAEvD,OAAOV,EAAQW,MAAMjF,EAASkF,aAAaH,IAE3C,IAAMI,EAAe,IAAI3E,IAAUsC,SAAOsC,MAAMC,aAAY,OAACrF,SAAD,IAACA,MAAY,IAAIQ,IAAU,KAAKlB,SAAS,IAAK,SACpGyF,EAAW,IAAIvE,IAAJ,UAAiBqE,IAAqBS,gBAEvD,OAAOhB,EAAQW,MAAME,EAAaD,aAAaH,KAI7CQ,GAAW,uCAAG,gCAAAzK,EAAA,yDACbmG,IAAcxB,GADD,oDAGd6E,EAAUD,YAASpD,GAAUqD,SAC3BI,EAAQjF,GAAImB,MAAMW,OAAV,iBAAiBR,SAAjB,IAAiBA,QAAjB,EAAiBA,GAAaU,aAA9B,QAAuC,IAJnC,iDASdgD,GAAcC,IAAUlG,GAAYyC,GAAUE,cAAgBnF,KAChEsI,EAAUM,GAAeN,EAASrD,GAAUE,aAG9C5B,EAAa,2BACRxD,GADO,IAEVsD,eAAgBiF,EAAQkB,cAAc,GAAGjB,WAAWtD,GAAUuD,UAAUlF,cAG1E5H,EAASe,IAAQC,OAAOiJ,WAAW,CACjCI,WAAYnK,EACZyH,eAAgBiF,EAAQkB,cAAc,GAAGjB,WAAWtD,GAAUuD,aApB9C,2CAAH,qDA8BjB,OACE,eAAChQ,EAAA,EAAD,2BAAgBE,GAAhB,IAAsBC,UAAWS,IAAIP,EAAQxC,KAAMsC,GAAnD,WACI6K,EAAY3G,0BACZ,eAAC/D,EAAA,EAAD,CAAKlC,QAAQ,OAAO8G,cAAc,SAAS/E,UAAWE,EAAQuB,UAA9D,UACE,eAAC,KAAD,CAAMjB,QAAQ,KAAKwE,MAAM,SAAShD,UAAW,EAA7C,gBACK,sBAAMhC,UAAWE,EAAQsI,aAAzB,uBAEL,cAAC,KAAD,CAAML,OAAQ,EAAGnD,MAAM,SAASpG,MAAM,gBAAgBoB,UAAWE,EAAQyI,YAAzE,SACE,cAACmI,EAAA,EAAD,CAASC,UAAU,SAASC,OAAK,EAACC,MAAM,oCAAxC,SACE,8CAEG,IACD,mBAAG7L,KAAK,yBAAyBC,OAAO,SAAS6L,IAAI,aAArD,2BAIN,eAAC/Q,EAAA,EAAD,CAAK8E,GAAI,EAAGC,GAAI,EAAGjH,QAAQ,OAAOmC,eAAe,gBAAgB/B,SAAS,WAA1E,UACE,eAAC8B,EAAA,EAAD,CAAKH,UAAWE,EAAQ2I,IAAKsI,QAAQ,sBAArC,UACE,cAAC,KAAD,CAAM3Q,QAAQ,KAAKwE,MAAM,SAAzB,kBACA,cAAC7E,EAAA,EAAD,CAAKlC,QAAQ,OAAON,KAAM,EAAGwH,WAAW,SAAS/E,eAAe,SAAS6E,GAAI,IAAKC,GAAI,IAAtF,SACGmC,KAAmB3C,aAAWC,SAC3B,cAAC,IAAD,IACA,cAAC,IAAD,MAGN,cAACxE,EAAA,EAAD,CAAKlC,QAAQ,OAAOmC,eAAe,SAAnC,SACE,cAACgR,EAAA,EAAD,CAAa5Q,QAAQ,WAAWR,UAAWE,EAAQ4I,YAAnD,SACE,eAACuI,EAAA,EAAD,CACEC,UAAW,CAAEpR,QAAS,CAAEqR,MAAOrR,EAAQgJ,aACvC/H,MAAOkG,GACPmK,SAxSa,SAACC,GAC1BA,EAAEpM,OAAOlE,QAAUuD,aAAW8C,SAChC6F,GAAgB,OAACnG,QAAD,IAACA,OAAD,EAACA,EAAQoG,YAAYC,QACrCC,GAAerD,GAEfpH,EAASe,IAAQC,OAAOiJ,WAAW,CACjC3F,eAAgB3C,aAAW8C,QAC3B6E,aAAc3H,aAAWC,cAG3B0I,GAAiBlD,GACjBqD,GAAc,OAACtG,QAAD,IAACA,OAAD,EAACA,EAAQoG,YAAYC,QAEnCxK,EAASe,IAAQC,OAAOiJ,WAAW,CACjC3F,eAAgB3C,aAAWC,SAC3B0H,aAAc3H,aAAW8C,aA0RbrF,MAAM,GAJR,UAME,cAACuP,EAAA,EAAD,CAAUvQ,MAAOuD,aAAW8C,QAA5B,qBACA,cAACkK,EAAA,EAAD,CAAUvQ,MAAOuD,aAAWC,SAA5B,6BAKN,cAAC,IAAD,CACEgN,UAAWpG,GACXqG,MAAOvK,GACPoG,QAASlD,EAAgBC,eAAiB,GAC1ClF,QA7Ja,WACzB,OAAI+B,KAAmB3C,aAAW8C,QACzBuH,KAGHxE,EAAgBC,eAAiBH,OACnCe,GAAkBG,IAEXoC,WAwJH,cAACxN,EAAA,EAAD,CAAKxC,KAAM,KACX,cAAC,IAAD,CAAUqC,UAAWE,EAAQkJ,SAAU9D,QAhMxB,WACvB,IAAMuM,EAAaxK,KAAmB3C,aAAW8C,QACjDoD,EAAa,2BACRxD,GADO,IAEVqD,YAAarD,EAAUoD,cACvBA,cAAepD,EAAUqD,eAG3B1H,EAASe,IAAQC,OAAOiJ,WAAW,CACjC3F,eAAgBwK,EAAanN,aAAWC,SAAWD,aAAW8C,QAC9D6E,aAAcwF,EAAanN,aAAW8C,QAAU9C,aAAWC,SAE3D6F,cAAepD,EAAUqD,YACzBA,YAAarD,EAAUoD,cAEvByB,WAAOoD,QAkLD,eAAClP,EAAA,EAAD,CAAKH,UAAWE,EAAQ2I,IAAKsI,QAAQ,sBAArC,UAEE,cAAC,KAAD,CAAM3Q,QAAQ,KAAKwE,MAAM,SAAzB,gBAEA,cAAC7E,EAAA,EAAD,CAAKlC,QAAQ,OAAON,KAAM,EAAGwH,WAAW,SAAS/E,eAAe,SAAS6E,GAAI,IAAKC,GAAI,IAAtF,SACGmH,KAAiB3H,aAAW8C,QACzB,cAAC,IAAD,IACA,cAAC,IAAD,MAGN,cAACrH,EAAA,EAAD,CAAKlC,QAAQ,OAAOmC,eAAe,SAAnC,SACE,cAACgR,EAAA,EAAD,CAAa5Q,QAAQ,WAAWR,UAAWE,EAAQ4I,YAAnD,SACE,eAACuI,EAAA,EAAD,CACEC,UAAW,CAAEpR,QAAS,CAAEqR,MAAOrR,EAAQgJ,aACvC/H,MAAOkL,GACPmF,SArTW,SAACC,GACxBA,EAAEpM,OAAOlE,QAAUuD,aAAW8C,SAChCgG,GAAc,OAACtG,QAAD,IAACA,OAAD,EAACA,EAAQoG,YAAYC,QACnCF,GAAiBlD,GAEjBpH,EAASe,IAAQC,OAAOiJ,WAAW,CACjC3F,eAAgB3C,aAAWC,SAC3B0H,aAAc3H,aAAW8C,aAG3BgG,GAAerD,GACfkD,GAAgB,OAACnG,QAAD,IAACA,OAAD,EAACA,EAAQoG,YAAYC,QAErCxK,EAASe,IAAQC,OAAOiJ,WAAW,CACjC3F,eAAgB3C,aAAW8C,QAC3B6E,aAAc3H,aAAWC,cAuSbxC,MAAM,GAJR,UAME,cAACuP,EAAA,EAAD,CAAUvQ,MAAOuD,aAAWC,SAA5B,sBACA,cAAC+M,EAAA,EAAD,CAAUvQ,MAAOuD,aAAW8C,QAA5B,4BAIN,cAAC,IAAD,CACEmK,UAAWlG,GACXmG,MAAOvF,GACPoB,QAASlD,EAAgBE,aAAe,GACxCnF,QAhLa,WACzB,OAAI+G,KAAiB3H,aAAW8C,QACvBuH,KAGHxE,EAAgBC,eAAiBH,OACnCe,GAAkBK,IAEXkC,cA6KL,cAAC,IAAD,CACExL,MAAM,kBACNtD,UAAW0L,EAAgBC,gBAAkBD,EAAgBE,YAC7DwB,MAAK,OAAEK,SAAF,IAAEA,MAAa,KACpBwF,OAAQ1K,EAAUsD,eAClBqH,aAhQsB,WAC9BnH,EAAa,2BACRxD,GADO,IAEVsD,eAAgBH,EAAgBG,eAAeC,SAAS,QA8PlDqH,eAhRqB,WAA8B,IAAD,EAA5BC,EAA4B,uDAAR,IAC9CvH,EAAiB,IAAImB,IAAUoG,GAAWpB,cAAzB,iBAAuCvE,SAAvC,IAAuCA,QAAvC,EAAuCA,GAAWuD,gBAAlD,QAA8D,IAC/EnF,EAAewH,SAAWxH,EAAeyH,eAAiBzH,EAAe0H,cAAY1H,EAAiB2H,KAE1GzH,EAAa,2BACRxD,GADO,IAEVsD,eAAgBuH,KAGlBlP,EAASe,IAAQC,OAAOiJ,WAAW,CACjCI,WAAYnK,EACZyH,qBAsQM4H,iBA3Pe,SAACrG,GACxB,IAAIM,EAMJA,GAJEA,EADElF,KAAmB3C,aAAWC,SACjBsH,EAAMwB,QAAQ8E,cAEdC,4BAAkBvG,EAAMwB,SAAS8E,eAEtBE,QAAQ,MAAO,IAE3C,IAAMrG,EAAc9I,EAAYsJ,OAAOvF,IAAgBwF,MAAK,SAAAT,GAAW,OAAIA,EAAYG,eAAiBA,KAEpGhC,EAAgB0B,OAAS1B,EAAgB0B,QAAUG,GAEvDrJ,EAASe,IAAQC,OAAOiJ,WAAW,CACjCI,WAAYnK,EACZgJ,MAAOG,MA6ODD,UAAWA,GACXyE,YAAaA,GACb8B,eAAe,EACfC,gBAjGc,WAClBpD,IACFN,QAkGI,cAAC3O,EAAA,EAAD,CACEgF,QAAS2J,GACTpQ,UAAW0Q,GACXvP,UAAWE,EAAQ6B,aACnBnD,MAAM,UACN4B,QAAQ,YALV,SAMK4G,EAAUoD,eAAiBpD,EAAUqD,YAEpCF,EAAgBG,eAAe8E,SAC7B,eACA,uBAHF,sBAQV,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,IAAD,CAAiBP,aAAcpE,EAAY3G,2BAC3C,cAAC,IAAD,CACEU,OAAQuG,GACRyH,SAAQ,OAAEzH,SAAF,IAAEA,QAAF,EAAEA,GAAgB0H,QAC1B7S,UAAWE,EAAQwJ,SACnBoJ,eAAgB,WAAQ5D,IAAsB,GAAOvB,MACrDoF,gBAAiB,kBAAM7D,MACvB8D,YAAa,kBAAM5H,QAAkBiE","file":"static/js/12.b0e5c44e.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { Box, Button, makeStyles } from '@material-ui/core';\r\nimport cls from \"classnames\";\r\nimport { PaperProps } from 'material-ui';\r\nimport { NavLink as RouterLink } from \"react-router-dom\";\r\nimport { AppTheme } from 'app/theme/types';\r\n\r\nconst CustomRouterLink = forwardRef((props: any, ref: any) => (\r\n  <div ref={ref} style={{ flexGrow: 1, flexBasis: 1 }} >\r\n    <RouterLink {...props} />\r\n  </div>\r\n));\r\n\r\nconst CARD_BORDER_RADIUS = 12;\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n  root: {\r\n    flex: 1,\r\n    padding: theme.spacing(8, 4, 2),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: theme.spacing(6, 4, 2),\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      padding: theme.spacing(6, 2, 2),\r\n    },\r\n  },\r\n  tabs: {\r\n    display: \"flex\",\r\n    width: \"488px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      maxWidth: 450,\r\n    },\r\n  },\r\n  tab: {\r\n    position: \"relative\",\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n    borderRadius: CARD_BORDER_RADIUS,\r\n    backgroundColor: theme.palette.tab.disabledBackground,\r\n    color: theme.palette.tab.disabled,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.tab.active,\r\n      color: theme.palette.tab.selected\r\n    }\r\n  },\r\n  tabCornerLeft: {\r\n    borderTopRightRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n    border: theme.palette.border,\r\n  },\r\n  tabCornerRight: {\r\n    borderTopLeftRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    border: theme.palette.border,\r\n    borderWidth: \"1px 1px 1px 0\",\r\n  },\r\n  tabActive: {\r\n    backgroundColor: theme.palette.tab.active,\r\n    color: theme.palette.tab.selected,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.tab.active,\r\n      color: theme.palette.tab.selected,\r\n    },\r\n  },\r\n  tabNoticeOpposite: {\r\n    \"&:after\": {\r\n      borderBottom: `8px solid ${theme.palette.background.paperOpposite!}`,\r\n    }\r\n  },\r\n}))\r\n\r\nconst BridgeCard: React.FC<PaperProps> = (props: any) => {\r\n  const { children, className, staticContext, ...rest } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box display=\"flex\" justifyContent=\"center\" marginBottom=\"2em\">\r\n        <Box className={classes.tabs}>\r\n          <Button\r\n            disableElevation\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            className={cls(classes.tab, classes.tabCornerLeft)}\r\n            activeClassName={cls(classes.tabActive)}\r\n            component={CustomRouterLink}\r\n            to=\"/bridge\">New Transfer</Button>\r\n          <Button\r\n            disableElevation\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            className={cls(classes.tab, classes.tabCornerRight)}\r\n            activeClassName={cls(classes.tabActive)}\r\n            component={CustomRouterLink}\r\n            to=\"/history\">Transfer History</Button>\r\n        </Box>\r\n      </Box>\r\n      <Box {...rest}>\r\n        {children}\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default BridgeCard;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M7 6.12c-.43-.35-1.06-.3-1.41.13l-4.24 5.11c-.31.37-.31.91 0 1.28l4.24 5.11c.35.43.98.48 1.41.13.43-.35.48-.98.13-1.41L3.42 12l3.71-4.47c.35-.43.3-1.06-.13-1.41zM7 13h2v-2H7v2zm10-2h-2v2h2v-2zm-6 2h2v-2h-2v2zm6-6.88c-.43.35-.48.98-.13 1.41L20.58 12l-3.71 4.47c-.35.43-.29 1.06.13 1.41.43.35 1.06.3 1.41-.13l4.24-5.11c.31-.37.31-.91 0-1.28l-4.24-5.11c-.35-.42-.99-.48-1.41-.13z\"\n}), 'SettingsEthernetRounded');\n\nexports.default = _default;","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { Box, Button, makeStyles } from \"@material-ui/core\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Blockchain } from \"tradehub-api-js/build/main/lib/tradehub/utils\";\r\nimport { Network } from \"peleswap-sdk/lib/constants\";\r\nimport cls from \"classnames\";\r\nimport { DialogModal, Text } from \"app/components\";\r\nimport { actions } from \"app/store\";\r\nimport { BridgeState, BridgeTx, RootState } from \"app/store/types\";\r\nimport { AppTheme } from \"app/theme/types\";\r\nimport { hexToRGBA, useNetwork } from \"app/utils\";\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n  root: {\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      width: \"100%!important\"\r\n    },\r\n  },\r\n  container: {\r\n    backgroundColor: theme.palette.background.default,\r\n    borderLeft: theme.palette.border,\r\n    borderRight: theme.palette.border,\r\n    borderBottom: theme.palette.border,\r\n    borderRadius: \"0 0 12px 12px\",\r\n    padding: theme.spacing(2, 8, 2),\r\n    minWidth: 510,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: theme.spacing(2, 3, 2),\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      minWidth: 320\r\n    },\r\n  },\r\n  warning: {\r\n    color: theme.palette.warning.main\r\n  },\r\n  actionButton: {\r\n    marginTop: theme.spacing(1),\r\n    marginBottom: theme.spacing(1),\r\n    height: 46,\r\n  },\r\n  cancel: {\r\n    color: theme.palette?.label,\r\n    textDecoration: \"underline\",\r\n    \"&:hover\": {\r\n      cursor: \"pointer\"\r\n    }\r\n  },\r\n  dotIcon: {\r\n    marginRight: theme.spacing(1),\r\n    marginBottom: theme.spacing(0.1)\r\n  },\r\n  connectedButton: {\r\n    height: 46,\r\n    width: \"fit-content\",\r\n    backgroundColor: \"transparent\",\r\n    border: `1px solid ${theme.palette.type === \"dark\" ? `rgba${hexToRGBA(\"#DEFFFF\", 0.1)}` : \"#D2E5DF\"}`,\r\n    \"&:hover\": {\r\n      backgroundColor: `rgba${hexToRGBA(\"#DEFFFF\", 0.2)}`\r\n    }\r\n  },\r\n  breakLine: {\r\n    wordBreak: \"break-word\"\r\n  },\r\n  link: {\r\n    color: theme.palette.link,\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\"\r\n    }\r\n  }\r\n}));\r\n\r\nconst FailedBridgeTxWarning = (props: any) => {\r\n  const { children, className, ...rest } = props;\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const network = useNetwork();\r\n  const [failedDepositTx, setFailedDepositTx] = useState<BridgeTx | null>(null);\r\n  const bridgeState = useSelector<RootState, BridgeState>(state => state.bridge);\r\n\r\n  useEffect(() => {\r\n    if (bridgeState.activeBridgeTx?.depositFailedAt) {\r\n      setFailedDepositTx(bridgeState.activeBridgeTx!);\r\n    } else if (!bridgeState.activeBridgeTx) {\r\n      setFailedDepositTx(null);\r\n    }\r\n  }, [bridgeState.activeBridgeTx])\r\n\r\n  const onTryAgain = () => {\r\n    if (!failedDepositTx) return;\r\n\r\n    dispatch(actions.Bridge.dismissBridgeTx(failedDepositTx));\r\n    dispatch(actions.Layout.showTransferConfirmation(false));\r\n  };\r\n\r\n  const explorerLink = useMemo(() => {\r\n    const hash = failedDepositTx?.sourceTxHash ?? \"\";\r\n    if (network === Network.MainNet) {\r\n      switch (failedDepositTx?.srcChain) {\r\n        case Blockchain.Ethereum:\r\n          return `https://etherscan.io/search?q=${hash}`;\r\n        default:\r\n          return `https://viewblock.io/zilliqa/tx/${hash}`;\r\n      }\r\n    } else {\r\n      switch (failedDepositTx?.srcChain) {\r\n        case Blockchain.Ethereum:\r\n          return `https://ropsten.etherscan.io/search?q=${hash}`;\r\n        default:\r\n          return `https://viewblock.io/zilliqa/tx/${hash}?network=testnet`;\r\n      }\r\n    }\r\n  }, [failedDepositTx, network]);\r\n\r\n  return (\r\n    <DialogModal\r\n      open={!!failedDepositTx}\r\n      onClose={onTryAgain}\r\n      {...rest}\r\n      className={cls(classes.root, className)}\r\n    >\r\n      <Box overflow=\"hidden\" display=\"flex\" flexDirection=\"column\" className={classes.container}>\r\n        <Text variant=\"h2\" align=\"center\" className={classes.warning}>\r\n          Bridge TX Failed\r\n        </Text>\r\n\r\n        <Box mt={2} mb={2.5} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n          <Text marginBottom={1} variant=\"h6\" align=\"center\">\r\n            The bridge transaction has been rejected, your funds are not deducted, you may try again.\r\n          </Text>\r\n\r\n          <Text marginBottom={1} variant=\"h6\" align=\"center\" className={classes.breakLine}>\r\n            TX: {failedDepositTx?.sourceTxHash}\r\n          </Text>\r\n\r\n          <Button variant=\"contained\" className={classes.connectedButton} href={explorerLink} target=\"_blank\">\r\n            <Text variant=\"button\">View on Explorer</Text>\r\n          </Button>\r\n        </Box>\r\n\r\n        <Box display=\"flex\" mb={1}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.actionButton}\r\n            onClick={onTryAgain}\r\n            fullWidth\r\n          >\r\n            Try Again\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </DialogModal>\r\n  )\r\n}\r\n\r\nexport default FailedBridgeTxWarning;\r\n","import React, { Fragment } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { Box, BoxProps, Button, makeStyles } from \"@material-ui/core\";\r\nimport SettingsEthernetIcon from '@material-ui/icons/SettingsEthernetRounded';\r\nimport cls from \"classnames\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { ConnectedBridgeWallet } from \"core/wallet/ConnectedBridgeWallet\";\r\nimport { Text } from 'app/components';\r\nimport { ReactComponent as DotIcon } from \"app/components/ConnectWalletButton/dot.svg\";\r\nimport { actions } from \"app/store\";\r\nimport { AppTheme } from \"app/theme/types\";\r\nimport { hexToRGBA } from \"app/utils\";\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.background.default,\r\n        borderLeft: theme.palette.border,\r\n        borderRight: theme.palette.border,\r\n        borderBottom: theme.palette.border,\r\n        borderRadius: \"0 0 12px 12px\",\r\n        padding: theme.spacing(2, 8, 2),\r\n        minWidth: 510,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            padding: theme.spacing(2, 3, 2),\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            minWidth: 320\r\n        },\r\n    },\r\n    warning: {\r\n        color: theme.palette.warning.main\r\n    },\r\n    settingsEthernetIcon: {\r\n        verticalAlign: \"text-top\"\r\n    },\r\n    actionButton: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        height: 46,\r\n    },\r\n    cancel: {\r\n        color: theme.palette?.label,\r\n        textDecoration: \"underline\",\r\n        \"&:hover\": {\r\n            cursor: \"pointer\"\r\n        }\r\n    },\r\n    dotIcon: {\r\n        marginRight: theme.spacing(1),\r\n        marginBottom: theme.spacing(0.1)\r\n    },\r\n    connectedButton: {\r\n        height: 46,\r\n        width: \"fit-content\",\r\n        backgroundColor: \"transparent\",\r\n        border: `1px solid ${theme.palette.type === \"dark\" ? `rgba${hexToRGBA(\"#DEFFFF\", 0.1)}` : \"#D2E5DF\"}`,\r\n        \"&:hover\": {\r\n            backgroundColor: `rgba${hexToRGBA(\"#DEFFFF\", 0.2)}`\r\n        }\r\n    },\r\n}));\r\n\r\ninterface Props extends BoxProps {\r\n  currentChainName: string | null;\r\n  requiredChainName: string | null;\r\n  requiredChainID: string | null;\r\n  walletToChange: string | null;\r\n  ethWallet: ConnectedBridgeWallet | null;\r\n}\r\nconst NetworkSwitchBox = (props: Props) => {\r\n    const { className, currentChainName, requiredChainName, requiredChainID, walletToChange, ethWallet } = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (requiredChainName === null) {\r\n            dispatch(actions.Layout.toggleShowNetworkSwitch(\"close\"));\r\n        }\r\n\r\n        // eslint-disable-next-line\r\n    }, [requiredChainName]);\r\n\r\n    const onCloseDialog = () => {\r\n      dispatch(actions.Layout.toggleShowNetworkSwitch(\"close\"));\r\n    };\r\n\r\n    const switchEthChain = async () => {\r\n      try {\r\n        if (!ethWallet) return\r\n        await ethWallet.provider.request({\r\n            method: 'wallet_switchEthereumChain',\r\n            params: [{ chainId: requiredChainID }],\r\n        });\r\n        onCloseDialog();\r\n      } catch (switchError) {\r\n        console.error(switchError);\r\n      }\r\n    }\r\n\r\n    return (\r\n        <Box overflow=\"hidden\" display=\"flex\" flexDirection=\"column\" className={cls(classes.root, className)}>\r\n            <Text variant=\"h2\" align=\"center\" className={classes.warning}>\r\n                <SettingsEthernetIcon fontSize=\"large\" className={classes.settingsEthernetIcon} /> Network Switch Required\r\n            </Text>\r\n\r\n            <Box mt={2} mb={2.5} display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\r\n                <Text marginBottom={1} variant=\"h6\" align=\"center\">\r\n                    You are currently connected to\r\n                </Text>\r\n\r\n                <Button variant=\"contained\" className={classes.connectedButton}>\r\n                    <Text variant=\"button\">\r\n                        <DotIcon className={classes.dotIcon} />{currentChainName}\r\n                    </Text>\r\n                </Button>\r\n            </Box>\r\n\r\n\r\n            <Text marginBottom={2.5} align=\"center\">\r\n                Switch to the <span style={{ fontWeight: \"bold\" }}>{requiredChainName}</span> on <span style={{ fontWeight: \"bold\" }}>{walletToChange}</span> to start using ZilBridge.\r\n            </Text>\r\n\r\n            {requiredChainID && !ethWallet?.provider.isBoltX\r\n                ? <Fragment>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.actionButton}\r\n                        onClick={switchEthChain}\r\n                    >\r\n                        Switch to {requiredChainName}\r\n                    </Button>\r\n\r\n                    <Text marginTop={1.5} marginBottom={1.5} className={classes.cancel} align=\"center\" onClick={onCloseDialog}>\r\n                        Cancel\r\n                    </Text>\r\n                </Fragment>\r\n                : <Box display=\"flex\" mb={1}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.actionButton}\r\n                        onClick={onCloseDialog}\r\n                        fullWidth\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Box>\r\n            }\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default NetworkSwitchBox;\r\n","import React, { useMemo } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport cls from \"classnames\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Blockchain } from \"tradehub-api-js/build/main/lib/tradehub/utils\";\r\nimport { Network } from \"peleswap-sdk/lib/constants\";\r\nimport { ConnectedBridgeWallet } from \"core/wallet/ConnectedBridgeWallet\";\r\nimport { ConnectedWallet, WalletConnectType } from \"core/wallet\";\r\nimport { useNetwork } from \"app/utils\";\r\nimport { AppTheme } from \"app/theme/types\";\r\nimport { RootState } from \"app/store/types\";\r\nimport { actions } from \"app/store\";\r\nimport { DialogModal } from \"app/components\";\r\nimport NetworkSwitchBox from \"./NetworkSwitchBox\";\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n    root: {\r\n    },\r\n}));\r\n\r\nconst NetworkSwitchDialog = (props: any) => {\r\n    const { children, className, ...rest } = props;\r\n    const classes = useStyles();\r\n    const network = useNetwork();\r\n    const dispatch = useDispatch();\r\n    const showNetworkSwitchDialog = useSelector<RootState, boolean>(state => state.layout.showNetworkSwitchDialog);\r\n    const zilWallet = useSelector<RootState, ConnectedWallet | null>(state => state.wallet.wallet);\r\n    const ethWallet = useSelector<RootState, ConnectedBridgeWallet | null>(state => state.wallet.bridgeWallets[Blockchain.Ethereum]);\r\n    const srcChain = useSelector<RootState, Blockchain>(state => state.bridge.formState.fromBlockchain);\r\n\r\n    const isMainNet = useMemo(() => {\r\n      if (srcChain === Blockchain.Ethereum) {\r\n        if (Number(ethWallet?.chainId) === 3) return false;\r\n        // set to mainnet even if currently set to some random net\r\n        return true;\r\n      } else if (srcChain === Blockchain.Zilliqa) {\r\n        return network === Network.MainNet\r\n      }\r\n    }, [ethWallet?.chainId, network, srcChain])\r\n\r\n    const [requiredChainName, requiredChainID, walletToChange, currentChainName] = useMemo(() => {\r\n      const getEthChainName = (chainId: number) => {\r\n        switch (chainId) {\r\n          case 1: return 'Ethereum Network'\r\n          case 3: return 'Ropsten Test Network'\r\n          default: return 'Unknown Network'\r\n        }\r\n      }\r\n      const getEthWalletName = () => {\r\n        if (ethWallet?.provider.isBoltX) {\r\n            return 'BoltX';\r\n        } else if (ethWallet?.provider.isMetamask) {\r\n            return 'Metamask';\r\n        }\r\n        return 'Your Wallet';\r\n      }\r\n\r\n      const getZilWalletName = () => {\r\n        switch (zilWallet?.type) {\r\n          case WalletConnectType.Zeeves: return \"Zeeves Wallet\";\r\n          case WalletConnectType.ZilPay: return \"ZilPay\";\r\n          case WalletConnectType.BoltX: return \"BoltX\";\r\n          default: return \"Your Wallet\";\r\n        }\r\n      }\r\n\r\n      if (!ethWallet || !zilWallet) {\r\n        return [null, null, null, null]\r\n      }\r\n\r\n      const ethChainID = Number(ethWallet?.chainId)\r\n      if (isMainNet) {\r\n        if (ethChainID !== 1) {\r\n          dispatch(actions.Layout.toggleShowNetworkSwitch(\"open\"))\r\n          return [getEthChainName(1), '0x1', getEthWalletName(), getEthChainName(ethChainID)]\r\n        } else if (zilWallet?.network !== Network.MainNet) {\r\n          dispatch(actions.Layout.toggleShowNetworkSwitch(\"open\"))\r\n          return ['Zilliqa MainNet', null, getZilWalletName(), 'Zilliqa TestNet']\r\n        }\r\n      } else {\r\n        if (ethChainID !== 3) {\r\n          dispatch(actions.Layout.toggleShowNetworkSwitch(\"open\"))\r\n          return [getEthChainName(3), '0x3', getEthWalletName(), getEthChainName(ethChainID)]\r\n        } else if (zilWallet?.network !== Network.TestNet) {\r\n          dispatch(actions.Layout.toggleShowNetworkSwitch(\"open\"))\r\n          return ['Zilliqa TestNet', null, getZilWalletName(), 'Zilliqa MainNet']\r\n        }\r\n      }\r\n      return [null, null, null, null]\r\n    }, [dispatch, ethWallet, zilWallet, isMainNet])\r\n\r\n    const onCloseDialog = () => {\r\n        dispatch(actions.Layout.toggleShowNetworkSwitch(\"close\"));\r\n    };\r\n\r\n    return (\r\n        <DialogModal\r\n            open={showNetworkSwitchDialog}\r\n            onClose={onCloseDialog}\r\n            {...rest}\r\n            className={cls(classes.root, className)}\r\n        >\r\n            <NetworkSwitchBox ethWallet={ethWallet} requiredChainName={requiredChainName} requiredChainID={requiredChainID} walletToChange={walletToChange} currentChainName={currentChainName} />\r\n        </DialogModal>\r\n    )\r\n}\r\n\r\nexport default NetworkSwitchDialog;\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react';\r\nimport { Box, Button, FormControl, MenuItem, Select, Tooltip } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { fromBech32Address } from \"@zilliqa-js/crypto\";\r\nimport BigNumber from 'bignumber.js';\r\nimport cls from \"classnames\";\r\nimport { ethers } from \"ethers\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Blockchain, RestModels, TradeHubSDK } from \"tradehub-api-js\";\r\nimport Web3Modal from 'web3modal';\r\nimport { Network } from \"peleswap-sdk/lib/constants\";\r\nimport { ConnectedBridgeWallet } from \"core/wallet/ConnectedBridgeWallet\";\r\nimport { ConnectedWallet } from \"core/wallet\";\r\nimport { providerOptions } from \"core/ethereum\";\r\nimport { ConfirmTransfer, ConnectETHPopper, CurrencyInput, Text } from 'app/components';\r\nimport FailedBridgeTxWarning from \"app/components/FailedBridgeTxWarning\";\r\nimport NetworkSwitchDialog from \"app/components/NetworkSwitchDialog\";\r\nimport BridgeCard from \"app/layouts/BridgeCard\";\r\nimport { actions } from \"app/store\";\r\nimport { BridgeFormState, BridgeState } from 'app/store/bridge/types';\r\nimport { LayoutState, RootState, TokenInfo } from \"app/store/types\";\r\nimport { AppTheme } from \"app/theme/types\";\r\nimport { bnOrZero, hexToRGBA, netZilToTradeHub, useAsyncTask, useNetwork, useTokenFinder } from \"app/utils\";\r\nimport { BIG_ZERO } from \"app/utils/constants\";\r\nimport { ConnectButton } from \"./components\";\r\nimport { BridgeParamConstants } from \"./components/constants\";\r\nimport { ReactComponent as EthereumLogo } from \"./ethereum-logo.svg\";\r\nimport { ReactComponent as WavyLine } from \"./wavy-line.svg\";\r\nimport { ReactComponent as ZilliqaLogo } from \"./zilliqa-logo.svg\";\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n  root: {\r\n  },\r\n  container: {\r\n    maxWidth: 488,\r\n    margin: \"0 auto\",\r\n    boxShadow: theme.palette.mainBoxShadow,\r\n    borderRadius: 12,\r\n    background: theme.palette.type === \"dark\" ? \"linear-gradient(#13222C, #002A34)\" : \"#F6FFFC\",\r\n    border: theme.palette.border,\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      maxWidth: 450,\r\n      padding: theme.spacing(2, 2, 0),\r\n    },\r\n    padding: theme.spacing(4, 4, 0),\r\n    marginBottom: 12\r\n  },\r\n  actionButton: {\r\n    marginTop: theme.spacing(4),\r\n    marginBottom: theme.spacing(4),\r\n    height: 46\r\n  },\r\n  connectWalletButton: {\r\n    marginTop: theme.spacing(2),\r\n    height: 46,\r\n  },\r\n  connectedWalletButton: {\r\n    backgroundColor: \"transparent\",\r\n    border: `1px solid ${theme.palette.type === \"dark\" ? `rgba${hexToRGBA(\"#DEFFFF\", 0.1)}` : \"#D2E5DF\"}`,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.label\r\n    }\r\n  },\r\n  textColoured: {\r\n    color: theme.palette.primary.dark\r\n  },\r\n  textSpacing: {\r\n    letterSpacing: \"0.5px\"\r\n  },\r\n  box: {\r\n    display: \"flex\",\r\n    flex: \"1 1 0\",\r\n    flexDirection: \"column\",\r\n    border: `1px solid ${theme.palette.type === \"dark\" ? \"#29475A\" : \"#D2E5DF\"}`,\r\n    borderRadius: 12,\r\n    padding: theme.spacing(1)\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    display: \"contents\",\r\n    \"& .MuiSelect-select:focus\": {\r\n      backgroundColor: \"transparent\"\r\n    },\r\n    \"& .MuiSelect-root\": {\r\n      borderRadius: 12,\r\n      \"&:hover\": {\r\n        backgroundColor: theme.palette.type === \"dark\" ? \"rgba(255, 255, 255, 0.05)\" : \"rgba(0, 0, 0, 0.05)\"\r\n      }\r\n    },\r\n    \"& .MuiOutlinedInput-root\": {\r\n      border: \"none\",\r\n    },\r\n    \"& .MuiInputBase-input\": {\r\n      fontWeight: \"bold\",\r\n      fontSize: \"16px\"\r\n    },\r\n    \"& .MuiSelect-icon\": {\r\n      top: \"calc(50% - 14px)\",\r\n      fill: theme.palette.label\r\n    },\r\n    \"& .MuiSelect-selectMenu\": {\r\n      minHeight: 0\r\n    },\r\n  },\r\n  selectMenu: {\r\n    backgroundColor: theme.palette.background.default,\r\n    \"& .MuiListItem-root\": {\r\n      borderRadius: \"12px\",\r\n      padding: theme.spacing(1.5),\r\n      justifyContent: \"center\",\r\n    },\r\n    \"& .MuiListItem-root.Mui-focusVisible\": {\r\n      backgroundColor: theme.palette.type === \"dark\" ? \"rgba(255, 255, 255, 0.08)\" : \"rgba(0, 0, 0, 0.04)\",\r\n    },\r\n    \"& .MuiListItem-root.Mui-selected\": {\r\n      backgroundColor: theme.palette.label,\r\n      color: theme.palette.primary.contrastText,\r\n    },\r\n    \"& .MuiList-padding\": {\r\n      padding: \"2px\"\r\n    }\r\n  },\r\n  wavyLine: {\r\n    cursor: \"pointer\",\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    marginLeft: \"-80px\",\r\n    marginTop: \"-80px\",\r\n    width: \"160px\",\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      width: \"110px\",\r\n      marginLeft: \"-55px\",\r\n    },\r\n  },\r\n  closeIcon: {\r\n    float: \"right\",\r\n    right: 0,\r\n    position: \"absolute\",\r\n    padding: 5,\r\n  },\r\n  priority: {\r\n    zIndex: 10,\r\n  },\r\n  extraPadding: {\r\n    padding: theme.spacing(1)\r\n  }\r\n}))\r\n\r\nconst initialFormState = {\r\n  sourceAddress: '',\r\n  destAddress: '',\r\n  transferAmount: '0',\r\n}\r\n\r\nconst CHAIN_NAMES: any = {\r\n  zil: Blockchain.Zilliqa,\r\n  eth: Blockchain.Ethereum,\r\n}\r\n\r\nconst BridgeView: React.FC<React.HTMLAttributes<HTMLDivElement>> = (props: any) => {\r\n  const { children, className, ...rest } = props;\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const network = useNetwork();\r\n  const tokenFinder = useTokenFinder();\r\n  const [ethConnectedAddress, setEthConnectedAddress] = useState('');\r\n  const wallet = useSelector<RootState, ConnectedWallet | null>(state => state.wallet.wallet); // zil wallet\r\n  const bridgeWallet = useSelector<RootState, ConnectedBridgeWallet | null>(state => state.wallet.bridgeWallets[Blockchain.Ethereum]); // eth wallet\r\n  const bridgeState = useSelector<RootState, BridgeState>(store => store.bridge);\r\n  const bridgeFormState: BridgeFormState = useSelector<RootState, BridgeFormState>(store => store.bridge.formState);\r\n  const [formState, setFormState] = useState<typeof initialFormState>({\r\n    sourceAddress: bridgeFormState.sourceAddress || \"\",\r\n    destAddress: bridgeFormState.destAddress || \"\",\r\n    transferAmount: bridgeFormState.transferAmount.toString() || \"0\"\r\n  });\r\n  const layoutState = useSelector<RootState, LayoutState>(store => store.layout);\r\n  const [sdk, setSdk] = useState<TradeHubSDK | null>(null);\r\n  const [runInitTradeHubSDK] = useAsyncTask(\"initTradeHubSDK\");\r\n  const [runLoadGasPrice] = useAsyncTask(\"loadGasPrice\");\r\n  const [disconnectMenu, setDisconnectMenu] = useState<any>();\r\n  const [gasPrice, setGasPrice] = useState<BigNumber | undefined>();\r\n  const disconnectSrcButtonRef = useRef();\r\n  const disconnectDestButtonRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (gasPrice?.gt(0) || !sdk) return;\r\n\r\n    runLoadGasPrice(async () => {\r\n      const gasPrice = await sdk?.eth.getProvider().getGasPrice();\r\n      setGasPrice(new BigNumber(gasPrice.toString()));\r\n    })\r\n\r\n    // eslint-disable-next-line\r\n  }, [sdk, gasPrice])\r\n\r\n  useEffect(() => {\r\n    runInitTradeHubSDK(async () => {\r\n      const tradehubNetwork = netZilToTradeHub(network)\r\n      const sdk = new TradeHubSDK({ network: tradehubNetwork });\r\n      await sdk.token.reloadTokens();\r\n      setSdk(sdk);\r\n    })\r\n\r\n    // eslint-disable-next-line\r\n  }, [network]);\r\n\r\n  const tokenList: 'bridge-zil' | 'bridge-eth' = bridgeFormState.fromBlockchain === Blockchain.Zilliqa ? 'bridge-zil' : 'bridge-eth';\r\n\r\n  const { token: bridgeToken, fromBlockchain, toBlockchain } = bridgeFormState;\r\n\r\n  const { fromToken } = useMemo(() => {\r\n    if (!bridgeToken) return {};\r\n    return {\r\n      fromToken: tokenFinder(bridgeToken.tokenAddress, bridgeToken.blockchain),\r\n      toToken: tokenFinder(bridgeToken.toTokenAddress, bridgeToken.toBlockchain),\r\n    }\r\n  }, [tokenFinder, bridgeToken])\r\n\r\n  useEffect(() => {\r\n    const bridgeTx = bridgeState.activeBridgeTx;\r\n\r\n    if (bridgeTx) {\r\n      if (!layoutState.showTransferConfirmation) {\r\n        dispatch(actions.Layout.showTransferConfirmation());\r\n      }\r\n\r\n      const bridgeTokens = bridgeState.tokens[bridgeTx.srcChain as Blockchain.Ethereum | Blockchain.Zilliqa];\r\n      const bridgeToken = bridgeTokens.find(token => token.denom === bridgeTx.srcToken);\r\n\r\n      dispatch(actions.Bridge.updateForm({\r\n        destAddress: bridgeTx.dstAddr,\r\n        sourceAddress: bridgeTx.srcAddr,\r\n        fromBlockchain: bridgeTx.srcChain,\r\n        toBlockchain: bridgeTx.dstChain,\r\n        forNetwork: network,\r\n        token: bridgeToken,\r\n      }))\r\n    }\r\n  }, [bridgeState.activeBridgeTx, bridgeState.tokens, layoutState, network, dispatch])\r\n\r\n  useEffect(() => {\r\n    if (wallet !== null) {\r\n      if (bridgeFormState.fromBlockchain === Blockchain.Zilliqa) {\r\n        setSourceAddress(wallet.addressInfo.byte20!)\r\n      } else {\r\n        setDestAddress(wallet.addressInfo.byte20!)\r\n      }\r\n    } else {\r\n      if (bridgeFormState.fromBlockchain === Blockchain.Zilliqa) {\r\n        setSourceAddress('')\r\n      } else {\r\n        setDestAddress('')\r\n      }\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [wallet, bridgeFormState.fromBlockchain])\r\n\r\n  const setSourceAddress = (address: string) => {\r\n\r\n    setFormState(prevState => ({\r\n      ...prevState,\r\n      sourceAddress: address\r\n    }))\r\n    dispatch(actions.Bridge.updateForm({\r\n      sourceAddress: address\r\n    }))\r\n  }\r\n\r\n  const setDestAddress = (address: string) => {\r\n    setFormState(prevState => ({\r\n      ...prevState,\r\n      destAddress: address\r\n    }))\r\n    dispatch(actions.Bridge.updateForm({\r\n      destAddress: address\r\n    }))\r\n  }\r\n\r\n  const onFromBlockchainChange = (e: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n    if (e.target.value === Blockchain.Zilliqa) {\r\n      setSourceAddress(wallet?.addressInfo.byte20!)\r\n      setDestAddress(ethConnectedAddress)\r\n\r\n      dispatch(actions.Bridge.updateForm({\r\n        fromBlockchain: Blockchain.Zilliqa,\r\n        toBlockchain: Blockchain.Ethereum,\r\n      }))\r\n    } else {\r\n      setSourceAddress(ethConnectedAddress)\r\n      setDestAddress(wallet?.addressInfo.byte20!)\r\n\r\n      dispatch(actions.Bridge.updateForm({\r\n        fromBlockchain: Blockchain.Ethereum,\r\n        toBlockchain: Blockchain.Zilliqa,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const onToBlockchainChange = (e: React.ChangeEvent<{ name?: string | undefined; value: unknown; }>) => {\r\n    if (e.target.value === Blockchain.Zilliqa) {\r\n      setDestAddress(wallet?.addressInfo.byte20!)\r\n      setSourceAddress(ethConnectedAddress)\r\n\r\n      dispatch(actions.Bridge.updateForm({\r\n        fromBlockchain: Blockchain.Ethereum,\r\n        toBlockchain: Blockchain.Zilliqa,\r\n      }))\r\n    } else {\r\n      setDestAddress(ethConnectedAddress)\r\n      setSourceAddress(wallet?.addressInfo.byte20!)\r\n\r\n      dispatch(actions.Bridge.updateForm({\r\n        fromBlockchain: Blockchain.Zilliqa,\r\n        toBlockchain: Blockchain.Ethereum,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const onClickConnectETH = async () => {\r\n    const web3Modal = new Web3Modal({\r\n      cacheProvider: false,\r\n      disableInjectedProvider: false,\r\n      network: network === Network.MainNet ? 'mainnet' : 'ropsten',\r\n      providerOptions\r\n    });\r\n\r\n    const provider = await web3Modal.connect();\r\n    const ethersProvider = new ethers.providers.Web3Provider(provider)\r\n    const signer = ethersProvider.getSigner();\r\n    const ethAddress = await signer.getAddress();\r\n    const chainId = (await ethersProvider.getNetwork()).chainId;\r\n\r\n    if (bridgeFormState.fromBlockchain === Blockchain.Ethereum) {\r\n      setSourceAddress(ethAddress);\r\n    }\r\n\r\n    if (bridgeFormState.toBlockchain === Blockchain.Ethereum) {\r\n      setDestAddress(ethAddress);\r\n    }\r\n\r\n    setEthConnectedAddress(ethAddress);\r\n\r\n    dispatch(actions.Wallet.setBridgeWallet({ blockchain: Blockchain.Ethereum, wallet: { provider: provider, address: ethAddress, chainId: chainId } }));\r\n    dispatch(actions.Token.refetchState());\r\n  };\r\n\r\n  const onClickConnectZIL = () => {\r\n    dispatch(actions.Layout.toggleShowWallet());\r\n\r\n    if (wallet !== null && bridgeFormState.fromBlockchain === Blockchain.Zilliqa) {\r\n      setSourceAddress(wallet.addressInfo.byte20);\r\n    }\r\n\r\n    if (wallet !== null && bridgeFormState.toBlockchain === Blockchain.Zilliqa) {\r\n      setDestAddress(wallet.addressInfo.byte20);\r\n    }\r\n  };\r\n\r\n  const onTransferAmountChange = (rawAmount: string = \"0\") => {\r\n    let transferAmount = new BigNumber(rawAmount).decimalPlaces(fromToken?.decimals ?? 0);\r\n    if (transferAmount.isNaN() || transferAmount.isNegative() || !transferAmount.isFinite()) transferAmount = BIG_ZERO;\r\n\r\n    setFormState({\r\n      ...formState,\r\n      transferAmount: rawAmount,\r\n    })\r\n\r\n    dispatch(actions.Bridge.updateForm({\r\n      forNetwork: network,\r\n      transferAmount,\r\n    }));\r\n  }\r\n\r\n  const onEndEditTransferAmount = () => {\r\n    setFormState({\r\n      ...formState,\r\n      transferAmount: bridgeFormState.transferAmount.toString(10),\r\n    })\r\n  };\r\n\r\n  const onCurrencyChange = (token: TokenInfo) => {\r\n    let tokenAddress: string | undefined;\r\n    if (fromBlockchain === Blockchain.Ethereum) {\r\n      tokenAddress = token.address.toLowerCase();\r\n    } else {\r\n      tokenAddress = fromBech32Address(token.address).toLowerCase();\r\n    }\r\n    tokenAddress = tokenAddress.replace(/^0x/, '');\r\n\r\n    const bridgeToken = bridgeState.tokens[fromBlockchain].find(bridgeToken => bridgeToken.tokenAddress === tokenAddress);\r\n\r\n    if (bridgeFormState.token && bridgeFormState.token === bridgeToken) return;\r\n\r\n    dispatch(actions.Bridge.updateForm({\r\n      forNetwork: network,\r\n      token: bridgeToken\r\n    }));\r\n  };\r\n\r\n  const swapBridgeChains = () => {\r\n    const isZilToEth = fromBlockchain === Blockchain.Zilliqa;\r\n    setFormState({\r\n      ...formState,\r\n      destAddress: formState.sourceAddress,\r\n      sourceAddress: formState.destAddress,\r\n    })\r\n\r\n    dispatch(actions.Bridge.updateForm({\r\n      fromBlockchain: isZilToEth ? Blockchain.Ethereum : Blockchain.Zilliqa,\r\n      toBlockchain: isZilToEth ? Blockchain.Zilliqa : Blockchain.Ethereum,\r\n\r\n      sourceAddress: formState.destAddress,\r\n      destAddress: formState.sourceAddress,\r\n\r\n      token: undefined,\r\n    }))\r\n  };\r\n\r\n  const showTransfer = () => {\r\n    if (!(\r\n      (Number(bridgeWallet?.chainId) === 1 && wallet?.network === Network.MainNet) ||\r\n      (Number(bridgeWallet?.chainId) === 3 && wallet?.network === Network.TestNet)\r\n    )) {\r\n      dispatch(actions.Layout.toggleShowNetworkSwitch(\"open\"))\r\n      return\r\n    }\r\n\r\n    dispatch(actions.Layout.showTransferConfirmation(!layoutState.showTransferConfirmation))\r\n  }\r\n\r\n  const onConnectSrcWallet = () => {\r\n    if (fromBlockchain === Blockchain.Zilliqa) {\r\n      return onClickConnectZIL();\r\n    } else {\r\n      // if connected, open menu\r\n      if (bridgeFormState.sourceAddress && bridgeWallet) {\r\n        setDisconnectMenu(disconnectSrcButtonRef)\r\n      } else {\r\n        return onClickConnectETH();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onConnectDstWallet = () => {\r\n    if (toBlockchain === Blockchain.Zilliqa) {\r\n      return onClickConnectZIL();\r\n    } else {\r\n      // if connected, open menu\r\n      if (bridgeFormState.sourceAddress && bridgeWallet) {\r\n        setDisconnectMenu(disconnectDestButtonRef)\r\n      } else {\r\n        return onClickConnectETH();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDisconnectEthWallet = (clear?: boolean) => {\r\n    let disconnectForm = {};\r\n    if (toBlockchain === Blockchain.Zilliqa) {\r\n      disconnectForm = {\r\n        sourceAddress: undefined,\r\n        token: undefined,\r\n      }\r\n    } else {\r\n      disconnectForm = {\r\n        destAddress: undefined,\r\n        token: undefined,\r\n      }\r\n    }\r\n    const web3Modal = new Web3Modal({\r\n      cacheProvider: true,\r\n      disableInjectedProvider: false,\r\n      network: \"ropsten\",\r\n      providerOptions\r\n    });\r\n    if (clear) {\r\n      web3Modal.clearCachedProvider();\r\n    }\r\n    setDisconnectMenu(null)\r\n    dispatch(actions.Bridge.updateForm(disconnectForm));\r\n    dispatch(actions.Wallet.setBridgeWallet({ blockchain: Blockchain.Ethereum, wallet: null }));\r\n  }\r\n\r\n  const isSubmitEnabled = useMemo(() => {\r\n    if (!formState.sourceAddress || !formState.destAddress)\r\n      return false;\r\n    if (bridgeFormState.transferAmount.isZero())\r\n      return false;\r\n    if (fromToken && bridgeFormState.transferAmount.isGreaterThan(bnOrZero(fromToken.balance).shiftedBy(-fromToken.decimals)))\r\n      return false;\r\n\r\n    return true\r\n  }, [formState, bridgeFormState.transferAmount, fromToken])\r\n\r\n  // returns true if asset is native coin, false otherwise\r\n  const isNativeAsset = (asset: RestModels.Token) => {\r\n    const zeroAddress = \"0000000000000000000000000000000000000000\";\r\n    return (asset.asset_id === zeroAddress)\r\n  }\r\n\r\n  const adjustedForGas = (balance: BigNumber, blockchain: Blockchain) => {\r\n    if (blockchain === Blockchain.Zilliqa) {\r\n      const gasPrice = new BigNumber(`${BridgeParamConstants.ZIL_GAS_PRICE}`);\r\n      const gasLimit = new BigNumber(`${BridgeParamConstants.ZIL_GAS_LIMIT}`);\r\n\r\n      return balance.minus(gasPrice.multipliedBy(gasLimit));\r\n    } else {\r\n      const gasPriceGwei = new BigNumber(ethers.utils.formatUnits((gasPrice ?? new BigNumber(65)).toString(10), \"gwei\"));\r\n      const gasLimit = new BigNumber(`${BridgeParamConstants.ETH_GAS_LIMIT}`);\r\n\r\n      return balance.minus(gasPriceGwei.multipliedBy(gasLimit));\r\n    }\r\n  }\r\n\r\n  const onSelectMax = async () => {\r\n    if (!fromToken || !sdk) return;\r\n\r\n    let balance = bnOrZero(fromToken.balance);\r\n    const asset = sdk.token.tokens[bridgeToken?.denom ?? \"\"];\r\n\r\n    if (!asset) return;\r\n\r\n    // Check if gas fees need to be deducted\r\n    if (isNativeAsset(asset) && CHAIN_NAMES[fromToken.blockchain] === fromBlockchain) {\r\n      balance = adjustedForGas(balance, fromToken.blockchain);\r\n    }\r\n\r\n    setFormState({\r\n      ...formState,\r\n      transferAmount: balance.decimalPlaces(0).shiftedBy(-fromToken.decimals).toString(),\r\n    })\r\n\r\n    dispatch(actions.Bridge.updateForm({\r\n      forNetwork: network,\r\n      transferAmount: balance.decimalPlaces(0).shiftedBy(-fromToken.decimals),\r\n    }))\r\n  }\r\n\r\n  const onEnterKeyPress = () => {\r\n    if (isSubmitEnabled) {\r\n      showTransfer();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <BridgeCard {...rest} className={cls(classes.root, className)}>\r\n      {!layoutState.showTransferConfirmation && (\r\n        <Box display=\"flex\" flexDirection=\"column\" className={classes.container}>\r\n          <Text variant=\"h2\" align=\"center\" marginTop={2}>\r\n            Zil<span className={classes.textColoured}>Bridge</span>\r\n          </Text>\r\n          <Text margin={1} align=\"center\" color=\"textSecondary\" className={classes.textSpacing}>\r\n            <Tooltip placement=\"bottom\" arrow title=\"TradeHub has been renamed Carbon!\">\r\n              <span>\r\n                Powered by\r\n                {\" \"}\r\n                <a href=\"https://carbon.network\" target=\"_blank\" rel=\"noreferrer\">Carbon</a>\r\n              </span>\r\n            </Tooltip>\r\n          </Text>\r\n          <Box mt={2} mb={2} display=\"flex\" justifyContent=\"space-between\" position=\"relative\">\r\n            <Box className={classes.box} bgcolor=\"background.contrast\">\r\n              <Text variant=\"h4\" align=\"center\">From</Text>\r\n              <Box display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" mt={1.5} mb={1.5}>\r\n                {fromBlockchain === Blockchain.Ethereum\r\n                  ? <EthereumLogo />\r\n                  : <ZilliqaLogo />\r\n                }\r\n              </Box>\r\n              <Box display=\"flex\" justifyContent=\"center\">\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <Select\r\n                    MenuProps={{ classes: { paper: classes.selectMenu } }}\r\n                    value={fromBlockchain}\r\n                    onChange={onFromBlockchainChange}\r\n                    label=\"\"\r\n                  >\r\n                    <MenuItem value={Blockchain.Zilliqa}>Zilliqa</MenuItem>\r\n                    <MenuItem value={Blockchain.Ethereum}>Ethereum</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n\r\n              <ConnectButton\r\n                buttonRef={disconnectSrcButtonRef}\r\n                chain={fromBlockchain}\r\n                address={bridgeFormState.sourceAddress || ''}\r\n                onClick={onConnectSrcWallet}\r\n              />\r\n            </Box>\r\n            <Box flex={0.3} />\r\n            <WavyLine className={classes.wavyLine} onClick={swapBridgeChains} />\r\n            <Box className={classes.box} bgcolor=\"background.contrast\">\r\n\r\n              <Text variant=\"h4\" align=\"center\">To</Text>\r\n\r\n              <Box display=\"flex\" flex={1} alignItems=\"center\" justifyContent=\"center\" mt={1.5} mb={1.5}>\r\n                {toBlockchain === Blockchain.Zilliqa\r\n                  ? <ZilliqaLogo />\r\n                  : <EthereumLogo />\r\n                }\r\n              </Box>\r\n              <Box display=\"flex\" justifyContent=\"center\">\r\n                <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                  <Select\r\n                    MenuProps={{ classes: { paper: classes.selectMenu } }}\r\n                    value={toBlockchain}\r\n                    onChange={onToBlockchainChange}\r\n                    label=\"\"\r\n                  >\r\n                    <MenuItem value={Blockchain.Ethereum}>Ethereum</MenuItem>\r\n                    <MenuItem value={Blockchain.Zilliqa}>Zilliqa</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Box>\r\n              <ConnectButton\r\n                buttonRef={disconnectDestButtonRef}\r\n                chain={toBlockchain}\r\n                address={bridgeFormState.destAddress || ''}\r\n                onClick={onConnectDstWallet}\r\n              />\r\n            </Box>\r\n          </Box>\r\n\r\n          <CurrencyInput\r\n            label=\"Transfer Amount\"\r\n            disabled={!bridgeFormState.sourceAddress || !bridgeFormState.destAddress}\r\n            token={fromToken ?? null}\r\n            amount={formState.transferAmount}\r\n            onEditorBlur={onEndEditTransferAmount}\r\n            onAmountChange={onTransferAmountChange}\r\n            onCurrencyChange={onCurrencyChange}\r\n            tokenList={tokenList}\r\n            onSelectMax={onSelectMax}\r\n            showMaxButton={true}\r\n            onEnterKeyPress={onEnterKeyPress}\r\n          />\r\n\r\n          <Button\r\n            onClick={showTransfer}\r\n            disabled={!isSubmitEnabled}\r\n            className={classes.actionButton}\r\n            color=\"primary\"\r\n            variant=\"contained\">\r\n            {!(formState.sourceAddress && formState.destAddress)\r\n              ? \"Connect Wallet\"\r\n              : bridgeFormState.transferAmount.isZero()\r\n                ? \"Enter Amount\"\r\n                : \"Head to Confirmation\"\r\n            }\r\n          </Button>\r\n        </Box>\r\n      )}\r\n      <NetworkSwitchDialog />\r\n      <FailedBridgeTxWarning />\r\n      <ConfirmTransfer showTransfer={layoutState.showTransferConfirmation} />\r\n      <ConnectETHPopper\r\n        open={!!disconnectMenu}\r\n        anchorEl={disconnectMenu?.current}\r\n        className={classes.priority}\r\n        onChangeWallet={() => { onDisconnectEthWallet(true); onClickConnectETH() }}\r\n        onDisconnectEth={() => onDisconnectEthWallet()}\r\n        onClickaway={() => setDisconnectMenu(undefined)}\r\n      >\r\n      </ConnectETHPopper>\r\n\r\n    </BridgeCard >\r\n  )\r\n}\r\nexport default BridgeView\r\n"],"sourceRoot":""}