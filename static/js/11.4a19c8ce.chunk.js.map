{"version":3,"sources":["app/layouts/BridgeCard/BridgeCard.tsx","../node_modules/@material-ui/icons/AddRounded.js","app/views/bridge/TransferHistory/TransferHistory.tsx"],"names":["CustomRouterLink","forwardRef","props","ref","style","flexGrow","flexBasis","useStyles","makeStyles","theme","root","flex","padding","spacing","breakpoints","down","tabs","display","width","maxWidth","tab","position","paddingTop","paddingBottom","borderRadius","backgroundColor","palette","disabledBackground","color","disabled","active","selected","tabCornerLeft","borderTopRightRadius","borderBottomRightRadius","border","tabCornerRight","borderTopLeftRadius","borderBottomLeftRadius","borderWidth","tabActive","tabNoticeOpposite","borderBottom","background","paperOpposite","BridgeCard","children","rest","className","staticContext","classes","Box","justifyContent","marginBottom","Button","disableElevation","variant","cls","activeClassName","component","to","_interopRequireDefault","require","_interopRequireWildcard","Object","defineProperty","exports","value","default","React","_default","createElement","d","container","margin","boxShadow","mainBoxShadow","type","primary","main","paddingLeft","paddingRight","fontSize","headerBox","flexDirection","titleBox","alignItems","buttonBox","textColoured","dark","refreshIcon","marginRight","verticalAlign","addIcon","resumeTransferButton","action","textAlign","hexToRGBA","height","resumeTransferText","contrastText","newTransferButton","newTransferText","tableContainer","table","borderCollapse","borderSpacing","tableHead","tableRow","whiteSpace","contrast","helpInfo","marginLeft","arrowRightIcon","label","button","chip","failedChip","ongoingChip","completeChip","currencyLogo","transferAmount","transferNetwork","noTransaction","chainLogo","zilLogo","CHAIN_NAMES","Blockchain","Zilliqa","Ethereum","Neo","BinanceSmartChain","TransferHistory","dispatch","useDispatch","bridgeableTokenFinder","useBridgeableTokenFinder","bridgeState","useSelector","state","bridge","previewTx","previewBridgeTx","bridgeTxs","pendingBridgeTx","activeBridgeTx","getTransferStage","tx","withdrawTxHash","depositTxConfirmedAt","sourceTxHash","getTransferStatus","depositFailedAt","Chip","Typography","align","destinationTxHash","getLogoToken","srcChain","srcToken","dstToken","overflow","mt","pl","pt","pb","Link","onClick","actions","Bridge","dismissBridgeTx","Layout","showTransferConfirmation","toggleShowResumeTransfer","TableContainer","Table","TableHead","TableRow","TableCell","placement","title","TableBody","slice","reverse","map","index","scope","depositDispatchedAt","format","dstChain","toHumanNumber","inputAmount","address","mnemonic","interimAddrMnemonics","setPreviewBridgeTx","setDisplayTx","endIcon","length","TransactionDetail","onBack","undefined","currentTx","approvalHash","isHistory"],"mappings":"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","file":"static/js/11.4a19c8ce.chunk.js","sourcesContent":["import React, { forwardRef } from 'react';\r\nimport { Box, Button, makeStyles } from '@material-ui/core';\r\nimport cls from \"classnames\";\r\nimport { PaperProps } from 'material-ui';\r\nimport { NavLink as RouterLink } from \"react-router-dom\";\r\nimport { AppTheme } from 'app/theme/types';\r\n\r\nconst CustomRouterLink = forwardRef((props: any, ref: any) => (\r\n  <div ref={ref} style={{ flexGrow: 1, flexBasis: 1 }} >\r\n    <RouterLink {...props} />\r\n  </div>\r\n));\r\n\r\nconst CARD_BORDER_RADIUS = 12;\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n  root: {\r\n    flex: 1,\r\n    padding: theme.spacing(8, 4, 2),\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      padding: theme.spacing(6, 4, 2),\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      padding: theme.spacing(6, 2, 2),\r\n    },\r\n  },\r\n  tabs: {\r\n    display: \"flex\",\r\n    width: \"488px\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      maxWidth: 450,\r\n    },\r\n  },\r\n  tab: {\r\n    position: \"relative\",\r\n    width: \"100%\",\r\n    paddingTop: theme.spacing(2),\r\n    paddingBottom: theme.spacing(2),\r\n    borderRadius: CARD_BORDER_RADIUS,\r\n    backgroundColor: theme.palette.tab.disabledBackground,\r\n    color: theme.palette.tab.disabled,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.tab.active,\r\n      color: theme.palette.tab.selected\r\n    }\r\n  },\r\n  tabCornerLeft: {\r\n    borderTopRightRadius: 0,\r\n    borderBottomRightRadius: 0,\r\n    border: theme.palette.border,\r\n  },\r\n  tabCornerRight: {\r\n    borderTopLeftRadius: 0,\r\n    borderBottomLeftRadius: 0,\r\n    border: theme.palette.border,\r\n    borderWidth: \"1px 1px 1px 0\",\r\n  },\r\n  tabActive: {\r\n    backgroundColor: theme.palette.tab.active,\r\n    color: theme.palette.tab.selected,\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.tab.active,\r\n      color: theme.palette.tab.selected,\r\n    },\r\n  },\r\n  tabNoticeOpposite: {\r\n    \"&:after\": {\r\n      borderBottom: `8px solid ${theme.palette.background.paperOpposite!}`,\r\n    }\r\n  },\r\n}))\r\n\r\nconst BridgeCard: React.FC<PaperProps> = (props: any) => {\r\n  const { children, className, staticContext, ...rest } = props;\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box className={classes.root}>\r\n      <Box display=\"flex\" justifyContent=\"center\" marginBottom=\"2em\">\r\n        <Box className={classes.tabs}>\r\n          <Button\r\n            disableElevation\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            className={cls(classes.tab, classes.tabCornerLeft)}\r\n            activeClassName={cls(classes.tabActive)}\r\n            component={CustomRouterLink}\r\n            to=\"/bridge\">New Transfer</Button>\r\n          <Button\r\n            disableElevation\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            className={cls(classes.tab, classes.tabCornerRight)}\r\n            activeClassName={cls(classes.tabActive)}\r\n            component={CustomRouterLink}\r\n            to=\"/history\">Transfer History</Button>\r\n        </Box>\r\n      </Box>\r\n      <Box {...rest}>\r\n        {children}\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default BridgeCard;\r\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M18 13h-5v5c0 .55-.45 1-1 1s-1-.45-1-1v-5H6c-.55 0-1-.45-1-1s.45-1 1-1h5V6c0-.55.45-1 1-1s1 .45 1 1v5h5c.55 0 1 .45 1 1s-.45 1-1 1z\"\n}), 'AddRounded');\n\nexports.default = _default;","import React, { Fragment } from \"react\";\r\nimport { Box, Button, Chip, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, makeStyles } from \"@material-ui/core\";\r\nimport AddIcon from '@material-ui/icons/AddRounded';\r\nimport ArrowRightRoundedIcon from '@material-ui/icons/ArrowRightRounded';\r\nimport RefreshIcon from '@material-ui/icons/RefreshRounded';\r\nimport cls from \"classnames\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Blockchain } from \"tradehub-api-js\";\r\nimport { CurrencyLogo, HelpInfo, ResumeTransferDialog, RevealMnemonic, Text } from 'app/components';\r\nimport BridgeCard from \"app/layouts/BridgeCard\";\r\nimport { actions } from \"app/store\";\r\nimport { BridgeState, BridgeTx, RootState } from \"app/store/types\";\r\nimport { AppTheme } from \"app/theme/types\";\r\nimport { hexToRGBA, useBridgeableTokenFinder } from \"app/utils\";\r\nimport { toHumanNumber } from \"app/utils\";\r\nimport TransactionDetail from \"app/views/bridge/TransactionDetail\";\r\nimport { ReactComponent as EthereumLogo } from \"../../main/Bridge/ethereum-logo.svg\";\r\nimport { ReactComponent as ZilliqaLogo } from \"../../main/Bridge/zilliqa-logo.svg\";\r\n\r\nconst useStyles = makeStyles((theme: AppTheme) => ({\r\n    root: {\r\n    },\r\n    container: {\r\n        margin: \"0 auto\",\r\n        boxShadow: theme.palette.mainBoxShadow,\r\n        borderRadius: 12,\r\n        background: theme.palette.type === \"dark\" ? \"linear-gradient(#13222C, #002A34)\" : \"#F6FFFC\",\r\n        border: theme.palette.border,\r\n        backgroundColor: theme.palette.background.default,\r\n        padding: theme.spacing(2, 8, 2),\r\n        maxWidth: 1100,\r\n        [theme.breakpoints.down(\"sm\")]: {\r\n            padding: theme.spacing(2, 3, 2),\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            maxWidth: 450,\r\n        },\r\n        \"& .MuiChip-root\": {\r\n            borderRadius: 12,\r\n            color: theme.palette.primary.main\r\n        },\r\n        \"& .MuiChip-label\": {\r\n            paddingLeft: 0,\r\n            paddingRight: 0\r\n        },\r\n        \"& .MuiChip-label>p:first-child\": {\r\n            fontSize: \"12px\"\r\n        },\r\n        \"& .MuiChip-label>p:not(:first-child)\": {\r\n            fontSize: \"11px\"\r\n        },\r\n        \"& .MuiTableCell-stickyHeader\": {\r\n            backgroundColor: \"transparent\"\r\n        },\r\n        \"& .MuiTypography-body1\": {\r\n            fontSize: \"14px\"\r\n        }\r\n    },\r\n    headerBox: {\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            flexDirection: \"column\",\r\n        },\r\n    },\r\n    titleBox: {\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            alignItems: \"center\",\r\n            marginBottom: theme.spacing(2)\r\n        },\r\n    },\r\n    buttonBox: {\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            flexDirection: \"column\",\r\n        },\r\n    },\r\n    textColoured: {\r\n        color: theme.palette.primary.dark\r\n    },\r\n    refreshIcon: {\r\n        marginRight: theme.spacing(0.5),\r\n        verticalAlign: \"middle\",\r\n    },\r\n    addIcon: {\r\n        marginRight: theme.spacing(0.5),\r\n        verticalAlign: \"middle\",\r\n    },\r\n    resumeTransferButton: {\r\n        color: theme.palette.action?.disabled,\r\n        backgroundColor: theme.palette.action?.disabledBackground,\r\n        textAlign: \"center\",\r\n        \"&:hover\": {\r\n            backgroundColor: `rgba${hexToRGBA(theme.palette.type === \"dark\" ? \"#003340\" : \"rgba(0, 51, 64, 0.5)\", 0.8)}`,\r\n        },\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            height: 46\r\n        },\r\n    },\r\n    resumeTransferText: {\r\n        color: theme.palette.primary.contrastText,\r\n        paddingRight: theme.spacing(0.5),\r\n    },\r\n    newTransferButton: {\r\n        color: theme.palette.action?.disabled,\r\n        backgroundColor: theme.palette.action?.disabledBackground,\r\n        textAlign: \"center\",\r\n        \"&:hover\": {\r\n            backgroundColor: `rgba${hexToRGBA(theme.palette.type === \"dark\" ? \"#003340\" : \"rgba(0, 51, 64, 0.5)\", 0.8)}`,\r\n        },\r\n        marginRight: theme.spacing(1),\r\n        [theme.breakpoints.down(\"xs\")]: {\r\n            marginRight: 0,\r\n            marginBottom: theme.spacing(1),\r\n            height: 46\r\n        },\r\n    },\r\n    newTransferText: {\r\n        color: theme.palette.primary.contrastText,\r\n        paddingRight: theme.spacing(0.5),\r\n    },\r\n    tableContainer: {\r\n        '&::-webkit-scrollbar': {\r\n            width: '0.4rem',\r\n            height: '0.4rem'\r\n        },\r\n        '&::-webkit-scrollbar-thumb': {\r\n            backgroundColor: `rgba${hexToRGBA(theme.palette.type === \"dark\" ? \"#DEFFFF\" : \"#003340\", 0.1)}`,\r\n            borderRadius: 12,\r\n        },\r\n        // if vertical scrollbar present\r\n        // padding: theme.spacing(0, 0.5),\r\n    },\r\n    table: {\r\n        borderCollapse: \"separate\",\r\n        borderSpacing: theme.spacing(0, 1)\r\n    },\r\n    tableHead: {\r\n        \"& th.MuiTableCell-root\": {\r\n            borderBottom: \"none\",\r\n        },\r\n    },\r\n    tableRow: {\r\n        \"& .MuiTableCell-root\": {\r\n            whiteSpace: \"nowrap\",\r\n            border: \"1px transparent\",\r\n            borderRadius: 12,\r\n            \"&:first-child\": {\r\n                borderTopRightRadius: 0,\r\n                borderBottomRightRadius: 0\r\n            },\r\n            \"&:not(:first-child):not(:last-child)\": {\r\n                borderRadius: 0\r\n            },\r\n            \"&:last-child\": {\r\n                borderTopLeftRadius: 0,\r\n                borderBottomLeftRadius: 0\r\n            }\r\n        },\r\n        backgroundColor: theme.palette.background?.contrast,\r\n    },\r\n    helpInfo: {\r\n        verticalAlign: \"top!important\",\r\n        marginLeft: \"2px!important\"\r\n    },\r\n    arrowRightIcon: {\r\n        color: theme.palette.label,\r\n        marginLeft: \"-8px\",\r\n        marginRight: \"-4px\"\r\n    },\r\n    button: {\r\n        borderRadius: 12,\r\n        height: \"32px\",\r\n        \"& .MuiButton-text\": {\r\n            padding: \"6px 16px\"\r\n        }\r\n    },\r\n    chip: {\r\n        width: \"75px\"\r\n    },\r\n    failedChip: {\r\n        backgroundColor: \"#FF5252\"\r\n    },\r\n    ongoingChip: {\r\n        backgroundColor: \"#FFDF6B\"\r\n    },\r\n    completeChip: {\r\n        backgroundColor: \"#00FFB0\"\r\n    },\r\n    currencyLogo: {\r\n        height: \"20px\",\r\n        width: \"20px\",\r\n        marginLeft: theme.spacing(0.5),\r\n        marginRight: theme.spacing(0.5),\r\n        marginBottom: theme.spacing(0.2)\r\n    },\r\n    transferAmount: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n    },\r\n    transferNetwork: {\r\n        display: \"flex\",\r\n        alignItems: \"center\"\r\n    },\r\n    noTransaction: {\r\n        color: theme.palette?.label,\r\n        marginBottom: theme.spacing(4)\r\n    },\r\n    chainLogo: {\r\n        height: \"16px\",\r\n        width: \"16px\",\r\n        marginBottom: theme.spacing(0.2)\r\n    },\r\n    zilLogo: {\r\n        marginRight: \"2px\"\r\n    }\r\n}));\r\n\r\nconst CHAIN_NAMES = {\r\n    [Blockchain.Zilliqa]: \"Zilliqa\",\r\n    [Blockchain.Ethereum]: \"Ethereum\",\r\n    [Blockchain.Neo]: \"Neo\",\r\n    [Blockchain.BinanceSmartChain]: \"Binance Smart Chain\",\r\n}\r\n\r\n// TODO: remove any, type the props properly\r\nconst TransferHistory = (props: any) => {\r\n    const { className, ...rest } = props;\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const bridgeableTokenFinder = useBridgeableTokenFinder();\r\n\r\n    const bridgeState = useSelector<RootState, BridgeState>(state => state.bridge);\r\n    const previewTx = useSelector<RootState, BridgeTx | undefined>(state => state.bridge.previewBridgeTx);\r\n    const bridgeTxs = bridgeState.bridgeTxs;\r\n    const pendingBridgeTx = bridgeState.activeBridgeTx;\r\n\r\n    const handleNewTransfer = () => {\r\n        if (pendingBridgeTx) {\r\n            dispatch(actions.Bridge.dismissBridgeTx(pendingBridgeTx));\r\n        }\r\n        dispatch(actions.Layout.showTransferConfirmation(false));\r\n    }\r\n\r\n    const handleResumeTransfer = () => {\r\n        dispatch(actions.Layout.toggleShowResumeTransfer(\"open\"));\r\n    }\r\n\r\n    const getTransferStage = (tx: BridgeTx) => {\r\n        if (tx?.withdrawTxHash) {\r\n            return \"Stage 3.1\"\r\n        }\r\n\r\n        if (tx?.depositTxConfirmedAt) {\r\n            return \"Stage 2.2\"\r\n        }\r\n\r\n        if (tx?.sourceTxHash) {\r\n            return \"Stage 2.1\"\r\n        }\r\n\r\n        return \"Stage 1.2\"\r\n    }\r\n\r\n    const getTransferStatus = (tx: BridgeTx) => {\r\n        // Failed tx\r\n        if (tx?.depositFailedAt) {\r\n            return (\r\n                <Chip\r\n                    className={cls(classes.chip, classes.failedChip)}\r\n                    label={\r\n                        <Fragment>\r\n                            <Typography align=\"center\"><strong>Failed</strong></Typography>\r\n                            <Typography align=\"center\" variant=\"body1\">{getTransferStage(tx)}</Typography>\r\n                        </Fragment>\r\n                    }\r\n                />\r\n            )\r\n        }\r\n\r\n        // Completed tx\r\n        if (tx?.destinationTxHash) {\r\n            return (\r\n                <Chip\r\n                    className={cls(classes.chip, classes.completeChip)}\r\n                    label={\r\n                        <Typography align=\"center\"><strong>Complete</strong></Typography>\r\n                    }\r\n                />\r\n            )\r\n        }\r\n\r\n        // Ongoing tx\r\n        return (\r\n            <Chip\r\n                className={cls(classes.chip, classes.ongoingChip)}\r\n                label={\r\n                    <Fragment>\r\n                        <Typography align=\"center\"><strong>Ongoing</strong></Typography>\r\n                        <Typography align=\"center\" variant=\"body1\">{getTransferStage(tx)}</Typography>\r\n                    </Fragment>\r\n                }\r\n            />\r\n        )\r\n    }\r\n\r\n    const setDisplayTx = (tx: BridgeTx) => {\r\n        dispatch(actions.Bridge.setPreviewBridgeTx(tx));\r\n    }\r\n\r\n    const clearPreview = () => {\r\n        dispatch(actions.Bridge.setPreviewBridgeTx(undefined));\r\n    }\r\n\r\n    const getLogoToken = (tx: BridgeTx) => {\r\n        return bridgeableTokenFinder(tx.srcChain === Blockchain.Zilliqa ? tx.srcToken : tx.dstToken, Blockchain.Zilliqa);\r\n    }\r\n\r\n    return (\r\n        <BridgeCard {...rest} className={cls(classes.root, className)}>\r\n            {!previewTx && (\r\n                <Box overflow=\"hidden\" display=\"flex\" flexDirection=\"column\" className={classes.container}>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" mt={2} pl={2} className={classes.headerBox}>\r\n                        <Box display=\"flex\" flexDirection=\"column\" className={classes.titleBox}>\r\n                            <Text variant=\"h2\">\r\n                                Zil<span className={classes.textColoured}>Bridge</span>\r\n                            </Text>\r\n\r\n                            <Text variant=\"h3\">\r\n                                Your Transfer History\r\n                            </Text>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" pt={0} pb={0} className={classes.buttonBox}>\r\n                            <Button component={Link} to=\"/bridge\" color=\"primary\" variant=\"contained\" className={classes.newTransferButton} onClick={handleNewTransfer}>\r\n                                <AddIcon fontSize=\"small\" className={classes.addIcon} />\r\n                                <Text variant=\"button\" className={classes.newTransferText}>New Transfer</Text>\r\n                            </Button>\r\n\r\n                            <Button color=\"primary\" variant=\"contained\" className={classes.resumeTransferButton} onClick={handleResumeTransfer}>\r\n                                <RefreshIcon fontSize=\"small\" className={classes.refreshIcon} />\r\n                                <Text variant=\"button\" className={classes.resumeTransferText}>Resume Transfer</Text>\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <TableContainer className={classes.tableContainer}>\r\n                        <Table className={classes.table}>\r\n                            <TableHead className={classes.tableHead}>\r\n                                <TableRow>\r\n                                    <TableCell>\r\n                                        <Box display=\"flex\" flexDirection=\"column\">\r\n                                            <Text variant=\"h6\">Transfer</Text>\r\n                                            <Text>Date</Text>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"left\">\r\n                                        <Box display=\"flex\" flexDirection=\"column\">\r\n                                            <Text variant=\"h6\">Network</Text>\r\n                                            <Text>From - To</Text>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box display=\"flex\" flexDirection=\"column\">\r\n                                            <Text variant=\"h6\">Transfer</Text>\r\n                                            <Text>Amount</Text>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box display=\"flex\" flexDirection=\"column\">\r\n                                            <Text variant=\"h6\">Transfer</Text>\r\n                                            <Text>Status</Text>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box display=\"flex\" flexDirection=\"column\">\r\n                                            <Text variant=\"h6\">Transfer</Text>\r\n                                            <Text>Key <HelpInfo className={classes.helpInfo} placement=\"top\" title=\"You may use your Transfer Key to recover failed transfers that failed in Stage 2.\" /></Text>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                    <TableCell align=\"center\">\r\n                                        <Box display=\"flex\" flexDirection=\"column\">\r\n                                            <Text variant=\"h6\">Transfer</Text>\r\n                                            <Text>Status</Text>\r\n                                        </Box>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {bridgeTxs.slice().reverse().map((tx: BridgeTx, index: number) => (\r\n                                    <TableRow key={index} className={classes.tableRow}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            <Text>\r\n                                                {tx.depositDispatchedAt?.format('DD MMM YYYY')}\r\n                                            </Text>\r\n                                        </TableCell>\r\n                                        <TableCell>\r\n                                            <Text className={classes.transferNetwork}>\r\n                                                {tx.srcChain === Blockchain.Zilliqa\r\n                                                    ? <ZilliqaLogo className={cls(classes.chainLogo, classes.zilLogo)} />\r\n                                                    : <EthereumLogo className={classes.chainLogo} />\r\n                                                }\r\n                                                {CHAIN_NAMES[tx.srcChain]}\r\n                                                {\" \"}\r\n                                                &mdash;\r\n\r\n                                                {tx.dstChain === Blockchain.Ethereum\r\n                                                    ? <EthereumLogo className={classes.chainLogo} />\r\n                                                    : <ZilliqaLogo className={cls(classes.chainLogo, classes.zilLogo)} />\r\n                                                }\r\n                                                {CHAIN_NAMES[tx.dstChain]}\r\n                                            </Text>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Text className={classes.transferAmount}>\r\n                                                {toHumanNumber(tx.inputAmount)}\r\n                                                <CurrencyLogo className={classes.currencyLogo} address={getLogoToken(tx)?.address} />\r\n                                            </Text>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {getTransferStatus(tx)}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <RevealMnemonic mnemonic={tx.interimAddrMnemonics} />\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Button\r\n                                                className={classes.button}\r\n                                                onClick={() => setDisplayTx(tx)}\r\n                                                endIcon={<ArrowRightRoundedIcon className={classes.arrowRightIcon} />}\r\n                                            >\r\n                                                <Text>Show Details</Text>\r\n                                            </Button>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n\r\n                        {!bridgeTxs.length && (\r\n                            <Typography align=\"center\" variant=\"body2\" className={classes.noTransaction}>No transactions found.</Typography>\r\n                        )}\r\n                    </TableContainer>\r\n                </Box>\r\n            )}\r\n            {previewTx && (\r\n                <TransactionDetail onBack={clearPreview} currentTx={previewTx} approvalHash=\"\" isHistory={true} />\r\n            )}\r\n\r\n            <ResumeTransferDialog />\r\n        </BridgeCard>\r\n    )\r\n}\r\n\r\nexport default TransferHistory;\r\n"],"sourceRoot":""}